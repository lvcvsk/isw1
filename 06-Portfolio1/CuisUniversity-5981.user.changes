

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (2 October 2023 20:39:03) as /home/oscar/Downloads/linux64/linux64/CuisUniversity-5981.image!


Object subclass: #HundredDoors
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SystemCategoryAutoSaving'!

!classDefinition: #HundredDoors category: 'SystemCategoryAutoSaving' stamp: 'OA 10/2/2023 20:39:39'!
Object subclass: #HundredDoors
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SystemCategoryAutoSaving'!

!classRemoval: #HundredDoors stamp: 'OA 10/2/2023 20:39:51'!
Object subclass: #HundredDoors
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'SystemCategoryAutoSaving'!

Object subclass: #HundredDoors
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDD'!

!classDefinition: #HundredDoors category: 'TDD' stamp: 'OA 10/2/2023 20:41:23'!
Object subclass: #HundredDoors
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDD'!

Object subclass: #HundredDoorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDD'!

!classDefinition: #HundredDoorsTest category: 'TDD' stamp: 'OA 10/2/2023 20:41:30'!
Object subclass: #HundredDoorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDD'!

!classDefinition: #DoorsFlipper category: 'TDD' stamp: 'OA 10/2/2023 20:47:40'!
Object subclass: #DoorsFlipper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDD'!
!HundredDoorsTest methodsFor: 'nil' stamp: 'OA 10/2/2023 20:46:54'!
test01
	|doorsFlipper|
	doorsFlipper := DoorsFlipper new.
	self assert: (doorsFlipper isClosed: 1)! !
!DoorsFlipper methodsFor: 'nil' stamp: 'OA 10/2/2023 20:49:17'!
isClosed: aDoorNumber
	^true
	! !

!classRemoval: #HundredDoors stamp: 'OA 10/2/2023 20:49:30'!
Object subclass: #HundredDoors
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDD'!

Object subclass: #DoorsFlipper
	instanceVariableNames: 'closed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDD'!

!classDefinition: #DoorsFlipper category: 'TDD' stamp: 'OA 10/2/2023 20:50:41'!
Object subclass: #DoorsFlipper
	instanceVariableNames: 'closed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDD'!
!DoorsFlipper methodsFor: 'nil' stamp: 'OA 10/2/2023 20:50:58' overrides: 16920235!
initialize
	closed := true.! !
!DoorsFlipper methodsFor: 'nil' stamp: 'OA 10/2/2023 20:51:28'!
flip
	closed :=false.! !
!DoorsFlipper class methodsFor: 'nil' stamp: 'OA 10/2/2023 21:07:49'!
with: aNumberOfDoors
	^self new initialize: aNumberOfDoors! !
!DoorsFlipper methodsFor: 'as yet unclassified' stamp: 'OA 10/2/2023 21:08:20'!
initializeWith: aNumberOfDoors
	closed := true.! !
!HundredDoorsTest methodsFor: 'nil' stamp: 'OA 10/2/2023 21:10:20'!
test04
	|doorsFlipper|
	doorsFlipper  := DoorsFlipper with: 2.
	doorsFlipper flip.
	doorsFlipper flip.
	
	self assert: (doorsFlipper isClosed: 1).
	self assert: (doorsFlipper isClosed: 2)! !
!DoorsFlipper methodsFor: 'as yet unclassified' stamp: 'OA 10/2/2023 21:14:24'!
flipBy: aStep
	! !
!DoorsFlipper methodsFor: 'as yet unclassified' stamp: 'OA 10/2/2023 21:15:08' prior: 50650439!
initializeWith: aNumberOfDoors
	closed := Array new: aNumberOfDoors withAll: true.! !
!DoorsFlipper methodsFor: 'as yet unclassified' stamp: 'OA 10/2/2023 21:18:17' prior: 50650452!
flipBy: aStep
	1 to: closed size by: aStep do: [:aDoorNumber | 
			closed at: aDoorNumber put: (closed at: aDoorNumber) not]! !
!DoorsFlipper methodsFor: 'as yet unclassified' stamp: 'OA 10/2/2023 21:18:44' prior: 50650462!
flipBy: aStep
	aStep to: closed size by: aStep do: [:aDoorNumber | 
			closed at: aDoorNumber put: (closed at: aDoorNumber) not]! !
!HundredDoorsTest methodsFor: 'as yet unclassified' stamp: 'OA 10/2/2023 21:25:53'!
test04canFlipMoreThanOneDoor
	|doorsFlipper|
	doorsFlipper  := DoorsFlipper with: 2.
	
	self assert: (doorsFlipper isClosed: 1).
	self assert: (doorsFlipper isClosed: 2)! !

!methodRemoval: HundredDoorsTest #test04 stamp: 'OA 10/2/2023 21:26:03'!
test04
	|doorsFlipper|
	doorsFlipper  := DoorsFlipper with: 2.
	doorsFlipper flip.
	doorsFlipper flip.
	
	self assert: (doorsFlipper isClosed: 1).
	self assert: (doorsFlipper isClosed: 2)!
!HundredDoorsTest methodsFor: 'as yet unclassified' stamp: 'OA 10/2/2023 21:27:06' prior: 50650476!
test04canFlipMoreThanOneDoor
	|doorsFlipper|
	doorsFlipper  := DoorsFlipper with: 4.
	doorsFlipper flipBy: 2.
	
	self assert: (doorsFlipper isClosed: 1).
	self deny: (doorsFlipper isClosed: 2).
	self assert: (doorsFlipper isClosed: 3).
	self deny: (doorsFlipper isClosed: 4)! !
!HundredDoorsTest methodsFor: 'as yet unclassified' stamp: 'OA 10/2/2023 21:27:21'!
test05
	|doorsFlipper|
	doorsFlipper  := DoorsFlipper with: 4.
	doorsFlipper flipBy: 2.
	
	self assert: (doorsFlipper isClosed: 1).
	self deny: (doorsFlipper isClosed: 2).
	self assert: (doorsFlipper isClosed: 3).
	self deny: (doorsFlipper isClosed: 4)! !
!HundredDoorsTest methodsFor: 'as yet unclassified' stamp: 'OA 10/2/2023 21:27:39' prior: 50650493!
test04canFlipMoreThanOneDoor
	|doorsFlipper|
	doorsFlipper  := DoorsFlipper with: 2.
	
	self assert: (doorsFlipper isClosed: 1).
	self assert: (doorsFlipper isClosed: 2).! !
!HundredDoorsTest methodsFor: 'as yet unclassified' stamp: 'OA 10/2/2023 21:29:40'!
test06
	|doorsFlipper|
	doorsFlipper  := DoorsFlipper with: 4.
	doorsFlipper flipAll.
	
	self assert: (doorsFlipper isClosed: 1).
	self deny: (doorsFlipper isClosed: 2).
	self assert: (doorsFlipper isClosed: 3).
	self deny: (doorsFlipper isClosed: 4)! !
!DoorsFlipper methodsFor: 'as yet unclassified' stamp: 'OA 10/2/2023 21:30:15'!
flipAll
	1 to: closed size do: [:aDoorNumber | self flipBy: aDoorNumber ].! !
!HundredDoorsTest methodsFor: 'as yet unclassified' stamp: 'OA 10/2/2023 21:30:51' prior: 50650526!
test06
	|doorsFlipper|
	doorsFlipper  := DoorsFlipper with: 4.
	doorsFlipper flipAll.
	
	self deny: (doorsFlipper isClosed: 1).
	self assert: (doorsFlipper isClosed: 2).
	self assert: (doorsFlipper isClosed: 3).
	self deny: (doorsFlipper isClosed: 4)! !
!HundredDoorsTest methodsFor: 'as yet unclassified' stamp: 'OA 10/2/2023 21:31:36'!
test06canFlipAll
	|doorsFlipper|
	doorsFlipper  := DoorsFlipper with: 4.
	doorsFlipper flipAll.
	
	self deny: (doorsFlipper isClosed: 1).
	self assert: (doorsFlipper isClosed: 2).
	self assert: (doorsFlipper isClosed: 3).
	self deny: (doorsFlipper isClosed: 4)! !

!methodRemoval: HundredDoorsTest #test06 stamp: 'OA 10/2/2023 21:31:40'!
test06
	|doorsFlipper|
	doorsFlipper  := DoorsFlipper with: 4.
	doorsFlipper flipAll.
	
	self deny: (doorsFlipper isClosed: 1).
	self assert: (doorsFlipper isClosed: 2).
	self assert: (doorsFlipper isClosed: 3).
	self deny: (doorsFlipper isClosed: 4)!

TestCase subclass: #HundredDoorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDD'!

!classDefinition: #HundredDoorsTest category: 'TDD' stamp: 'OA 10/2/2023 21:36:48'!
TestCase subclass: #HundredDoorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDD'!

!testRun: #HundredDoorsTest #test01 stamp: 'OA 10/2/2023 21:36:50'!
PASSED!

!testRun: #HundredDoorsTest #test04canFlipMoreThanOneDoor stamp: 'OA 10/2/2023 21:36:56'!
ERROR!

!testRun: #HundredDoorsTest #test04canFlipMoreThanOneDoor stamp: 'OA 10/2/2023 21:36:56'!
ERROR!

----QUIT----(2 October 2023 21:46:45) CuisUniversity-5981.image priorSource: 10197292!

----STARTUP---- (9 October 2023 12:47:00) as /home/oscar/Downloads/linux64/linux64/CuisUniversity-5981.image!


----End fileIn of /home/oscar/Downloads/linux64/linux64/Mars_Rover-_Exercise.st----!

!testRun: #MarsRoverTest #test01shouldInitializeInGivenCoordinateAndDirection stamp: 'OA 10/9/2023 12:48:04'!
PASSED!

!testRun: #MarsRoverTest #test02shouldDoNothingOnEmptyString stamp: 'OA 10/9/2023 12:48:04'!
FAILURE!

!testRun: #MarsRoverTest #test03shouldMoveForwardsPointingNorthCorrectly stamp: 'OA 10/9/2023 12:48:04'!
FAILURE!

!testRun: #MarsRoverTest #test04shouldMoveForwardsPointingSouthCorrectly stamp: 'OA 10/9/2023 12:48:04'!
FAILURE!

!testRun: #MarsRoverTest #test05shouldMoveForwardsPointingWestCorrectly stamp: 'OA 10/9/2023 12:48:04'!
FAILURE!

!testRun: #MarsRoverTest #test06shouldMoveForwardsPointingEastCorrectly stamp: 'OA 10/9/2023 12:48:04'!
FAILURE!

!testRun: #MarsRoverTest #test07shouldMoveBackwardsPointingNorthCorrectly stamp: 'OA 10/9/2023 12:48:04'!
FAILURE!

!testRun: #MarsRoverTest #test08shouldMoveBackwardsPointingSouthCorrectly stamp: 'OA 10/9/2023 12:48:04'!
FAILURE!

!testRun: #MarsRoverTest #test09shouldMoveBackwardsPointingEastCorrectly stamp: 'OA 10/9/2023 12:48:04'!
FAILURE!

!testRun: #MarsRoverTest #test10shouldMoveBackwardsPointingWestCorrectly stamp: 'OA 10/9/2023 12:48:04'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'OA 10/9/2023 12:48:04'!
FAILURE!

!testRun: #MarsRoverTest #test01shouldInitializeInGivenCoordinateAndDirection stamp: 'OA 10/9/2023 12:48:28'!
PASSED!

!testRun: #MarsRoverTest #test02shouldDoNothingOnEmptyString stamp: 'OA 10/9/2023 12:48:29'!
FAILURE!

!testRun: #MarsRoverTest #test02shouldDoNothingOnEmptyString stamp: 'OA 10/9/2023 12:48:29'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'OA 10/9/2023 12:49:33' prior: 50650897!
execute: commands 
	
	(commands = 'f') ifTrue: [	position := position + direction goForward].
	
	(commands = 'b') ifTrue: [ position := position + direction goBackwards].
	
	(commands = 'r') ifTrue: [direction := East new].! !

!testRun: #MarsRoverTest #test01shouldInitializeInGivenCoordinateAndDirection stamp: 'OA 10/9/2023 12:49:39'!
PASSED!

!testRun: #MarsRoverTest #test02shouldDoNothingOnEmptyString stamp: 'OA 10/9/2023 12:49:39'!
PASSED!

!testRun: #MarsRoverTest #test03shouldMoveForwardsPointingNorthCorrectly stamp: 'OA 10/9/2023 12:49:39'!
PASSED!

!testRun: #MarsRoverTest #test04shouldMoveForwardsPointingSouthCorrectly stamp: 'OA 10/9/2023 12:49:39'!
PASSED!

!testRun: #MarsRoverTest #test05shouldMoveForwardsPointingWestCorrectly stamp: 'OA 10/9/2023 12:49:39'!
PASSED!

!testRun: #MarsRoverTest #test06shouldMoveForwardsPointingEastCorrectly stamp: 'OA 10/9/2023 12:49:39'!
PASSED!

!testRun: #MarsRoverTest #test07shouldMoveBackwardsPointingNorthCorrectly stamp: 'OA 10/9/2023 12:49:39'!
PASSED!

!testRun: #MarsRoverTest #test08shouldMoveBackwardsPointingSouthCorrectly stamp: 'OA 10/9/2023 12:49:39'!
PASSED!

!testRun: #MarsRoverTest #test09shouldMoveBackwardsPointingEastCorrectly stamp: 'OA 10/9/2023 12:49:39'!
PASSED!

!testRun: #MarsRoverTest #test10shouldMoveBackwardsPointingWestCorrectly stamp: 'OA 10/9/2023 12:49:39'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'OA 10/9/2023 12:49:39'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'OA 10/9/2023 12:49:39'!
FAILURE!

!testRun: #MarsRoverTest #test01shouldInitializeInGivenCoordinateAndDirection stamp: 'OA 10/9/2023 12:49:42'!
PASSED!

!testRun: #MarsRoverTest #test01shouldInitializeInGivenCoordinateAndDirection stamp: 'OA 10/9/2023 12:49:43'!
PASSED!

!testRun: #MarsRoverTest #test03shouldMoveForwardsPointingNorthCorrectly stamp: 'OA 10/9/2023 12:49:44'!
PASSED!

!testRun: #MarsRoverTest #test02shouldDoNothingOnEmptyString stamp: 'OA 10/9/2023 12:49:46'!
PASSED!

!testRun: #MarsRoverTest #test04shouldMoveForwardsPointingSouthCorrectly stamp: 'OA 10/9/2023 12:49:47'!
PASSED!

!testRun: #MarsRoverTest #test01shouldInitializeInGivenCoordinateAndDirection stamp: 'OA 10/9/2023 12:49:52'!
PASSED!

!testRun: #MarsRoverTest #test02shouldDoNothingOnEmptyString stamp: 'OA 10/9/2023 12:49:52'!
PASSED!

!testRun: #MarsRoverTest #test03shouldMoveForwardsPointingNorthCorrectly stamp: 'OA 10/9/2023 12:49:52'!
PASSED!

!testRun: #MarsRoverTest #test04shouldMoveForwardsPointingSouthCorrectly stamp: 'OA 10/9/2023 12:49:52'!
PASSED!

!testRun: #MarsRoverTest #test05shouldMoveForwardsPointingWestCorrectly stamp: 'OA 10/9/2023 12:49:52'!
PASSED!

!testRun: #MarsRoverTest #test06shouldMoveForwardsPointingEastCorrectly stamp: 'OA 10/9/2023 12:49:52'!
PASSED!

!testRun: #MarsRoverTest #test07shouldMoveBackwardsPointingNorthCorrectly stamp: 'OA 10/9/2023 12:49:52'!
PASSED!

!testRun: #MarsRoverTest #test08shouldMoveBackwardsPointingSouthCorrectly stamp: 'OA 10/9/2023 12:49:52'!
PASSED!

!testRun: #MarsRoverTest #test09shouldMoveBackwardsPointingEastCorrectly stamp: 'OA 10/9/2023 12:49:52'!
PASSED!

!testRun: #MarsRoverTest #test10shouldMoveBackwardsPointingWestCorrectly stamp: 'OA 10/9/2023 12:49:52'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'OA 10/9/2023 12:49:52'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'OA 10/9/2023 12:49:52'!
FAILURE!

!testRun: #MarsRoverTest #test01shouldInitializeInGivenCoordinateAndDirection stamp: 'OA 10/9/2023 12:54:46'!
PASSED!

!testRun: #MarsRoverTest #test02shouldDoNothingOnEmptyString stamp: 'OA 10/9/2023 12:54:46'!
PASSED!

!testRun: #MarsRoverTest #test03shouldMoveForwardsPointingNorthCorrectly stamp: 'OA 10/9/2023 12:54:46'!
PASSED!

!testRun: #MarsRoverTest #test04shouldMoveForwardsPointingSouthCorrectly stamp: 'OA 10/9/2023 12:54:46'!
PASSED!

!testRun: #MarsRoverTest #test05shouldMoveForwardsPointingWestCorrectly stamp: 'OA 10/9/2023 12:54:46'!
PASSED!

!testRun: #MarsRoverTest #test06shouldMoveForwardsPointingEastCorrectly stamp: 'OA 10/9/2023 12:54:46'!
PASSED!

!testRun: #MarsRoverTest #test07shouldMoveBackwardsPointingNorthCorrectly stamp: 'OA 10/9/2023 12:54:46'!
PASSED!

!testRun: #MarsRoverTest #test08shouldMoveBackwardsPointingSouthCorrectly stamp: 'OA 10/9/2023 12:54:46'!
PASSED!

!testRun: #MarsRoverTest #test09shouldMoveBackwardsPointingEastCorrectly stamp: 'OA 10/9/2023 12:54:46'!
PASSED!

!testRun: #MarsRoverTest #test10shouldMoveBackwardsPointingWestCorrectly stamp: 'OA 10/9/2023 12:54:46'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'OA 10/9/2023 12:54:46'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'OA 10/9/2023 12:54:46'!
FAILURE!

MarsRover!

!testRun: #MarsRoverTest #test01shouldInitializeInGivenCoordinateAndDirection stamp: 'OA 10/9/2023 12:55:55'!
PASSED!

!testRun: #MarsRoverTest #test02shouldDoNothingOnEmptyString stamp: 'OA 10/9/2023 12:55:55'!
PASSED!

!testRun: #MarsRoverTest #test03shouldMoveForwardsPointingNorthCorrectly stamp: 'OA 10/9/2023 12:55:55'!
PASSED!

!testRun: #MarsRoverTest #test04shouldMoveForwardsPointingSouthCorrectly stamp: 'OA 10/9/2023 12:55:55'!
PASSED!

!testRun: #MarsRoverTest #test05shouldMoveForwardsPointingWestCorrectly stamp: 'OA 10/9/2023 12:55:55'!
PASSED!

!testRun: #MarsRoverTest #test06shouldMoveForwardsPointingEastCorrectly stamp: 'OA 10/9/2023 12:55:55'!
PASSED!

!testRun: #MarsRoverTest #test07shouldMoveBackwardsPointingNorthCorrectly stamp: 'OA 10/9/2023 12:55:55'!
PASSED!

!testRun: #MarsRoverTest #test08shouldMoveBackwardsPointingSouthCorrectly stamp: 'OA 10/9/2023 12:55:55'!
PASSED!

!testRun: #MarsRoverTest #test09shouldMoveBackwardsPointingEastCorrectly stamp: 'OA 10/9/2023 12:55:55'!
PASSED!

!testRun: #MarsRoverTest #test10shouldMoveBackwardsPointingWestCorrectly stamp: 'OA 10/9/2023 12:55:55'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'OA 10/9/2023 12:55:55'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'OA 10/9/2023 12:55:55'!
FAILURE!
!MarsRoverTest methodsFor: 'testing' stamp: 'OA 10/9/2023 13:07:31' prior: 50650760!
test11

	|marsRover coordinate direction commands |
	
	coordinate := 0@0.
	direction := North new.
	"finalDirection := East new."
	marsRover  := MarsRover withCoord: coordinate pointingTo: direction.
	commands := 'r'. 
	
	marsRover execute: commands.
	
	self assert: ((marsRover at: coordinate ) and: [marsRover cardinal: East new]).	
	
	! !

!testRun: #MarsRoverTest #test11 stamp: 'OA 10/9/2023 13:07:38'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'OA 10/9/2023 13:07:38'!
FAILURE!
!MarsRoverTest methodsFor: 'testing' stamp: 'OA 10/9/2023 13:08:04' prior: 50651160!
test11

	|marsRover coordinate direction commands finalDirection|
	
	coordinate := 0@0.
	direction := North new.
	finalDirection := East new.
	marsRover  := MarsRover withCoord: coordinate pointingTo: direction.
	commands := 'r'. 
	
	marsRover execute: commands.
	
	self assert: ((marsRover at: coordinate ) and: [marsRover cardinal: finalDirection]).	
	
	! !

----End fileIn of /home/oscar/Downloads/linux64/linux64/Packages/TerseGuide.pck.st----!

----STARTUP---- (11 October 2023 19:48:54) as /home/oscar/Downloads/linux64/linux64/CuisUniversity-5981.image!


!testRun: #HundredDoorsTest #test01 stamp: 'OA 10/11/2023 19:49:02'!
PASSED!

!testRun: #HundredDoorsTest #test04canFlipMoreThanOneDoor stamp: 'OA 10/11/2023 19:49:02'!
ERROR!

!testRun: #HundredDoorsTest #test05 stamp: 'OA 10/11/2023 19:49:02'!
ERROR!

!testRun: #HundredDoorsTest #test06canFlipAll stamp: 'OA 10/11/2023 19:49:02'!
ERROR!

----STARTUP---- (11 October 2023 20:01:17) as /home/oscar/Downloads/linux64/linux64/CuisUniversity-5981.image!


----End fileIn of /home/oscar/Downloads/linux64/linux64/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/11/2023 20:02:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:02:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:02:03'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/11/2023 20:02:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/11/2023 20:02:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/11/2023 20:02:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/11/2023 20:02:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:02:03'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/11/2023 20:02:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:02:07'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:02:07'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'OA 10/11/2023 20:03:24' prior: 50650813!
balance
	|sum|
	sum := 0.
	
	transactions do: [ :aTransaction | sum := sum = aTransaction value].
	
	^sum! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:03:29'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:03:29'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'OA 10/11/2023 20:04:50' prior: 50650868!
balance
	|sum|
	sum := 0.
	
	transactions do: [ :aTransaction | (aTransaction isKindOf: Deposit)
		ifTrue: [sum := sum + aTransaction] ifFalse: [sum := sum - aTransaction ]].
	
	^sum! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/11/2023 20:04:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:04:54'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:04:54'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/11/2023 20:04:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/11/2023 20:04:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/11/2023 20:04:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/11/2023 20:04:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/11/2023 20:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:04:58'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:04:58'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/11/2023 20:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/11/2023 20:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/11/2023 20:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/11/2023 20:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:05:01'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:05:01'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'OA 10/11/2023 20:05:23' prior: 50650882!
balance
	|sum|
	sum := 0.
	
	transactions do: [ :aTransaction | (aTransaction isKindOf: Deposit)
		ifTrue: [sum := sum + aTransaction value] ifFalse: [sum := sum - aTransaction value]].
	
	^sum! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/11/2023 20:05:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:05:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:05:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/11/2023 20:05:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/11/2023 20:05:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/11/2023 20:05:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/11/2023 20:05:25'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'OA 10/11/2023 20:09:42' prior: 50650952!
balance
	|sum|
	sum := 0.
	
	"transactions do: [ :aTransaction | (aTransaction isKindOf: Deposit)
		ifTrue: [sum := sum + aTransaction value] ifFalse: [sum := sum - aTransaction value]]."
	transactions do: [:aTransaction | sum := aTransaction m1: sum].
	
	^sum! !
!Deposit methodsFor: 'nil' stamp: 'OA 10/11/2023 20:10:26'!
m1: anAccumulator
	^anAccumulator +value.! !
!Withdraw methodsFor: 'nil' stamp: 'OA 10/11/2023 20:10:54'!
m1: anAccumulator
	^anAccumulator - value.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/11/2023 20:11:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:11:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/11/2023 20:11:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/11/2023 20:11:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/11/2023 20:11:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/11/2023 20:11:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/11/2023 20:11:00'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'OA 10/11/2023 20:12:37' prior: 50650988!
balance
	|sum|
	sum := 0.
	transactions do: [:aTransaction | sum := aTransaction m1: sum].
	
	^sum! !

----End fileIn of /home/oscar/Downloads/linux64/linux64/Packages/TerseGuide.pck.st----!

Object subclass: #Portfolio
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'OA 10/11/2023 20:15:26'!
Object subclass: #Portfolio
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'OA 10/11/2023 20:15:34'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'OA 10/11/2023 20:29:14'!
test01
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: Portfolio transactions isEmpty.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/11/2023 20:29:24' prior: 50653984!
test01
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio transactions isEmpty.! !
!Portfolio methodsFor: 'nil' stamp: 'OA 10/11/2023 20:30:39' overrides: 16920235!
initialize
	transactions := OrderedCollection new.! !

!testRun: #PortfolioTest #test01 stamp: 'OA 10/11/2023 20:30:42'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'OA 10/11/2023 20:31:21'!
transactions
	^transactions copy.! !

!testRun: #PortfolioTest #test01 stamp: 'OA 10/11/2023 20:31:27'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/11/2023 20:38:05'!
test02
	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.

	
	self assert: portfolio transactions isEmpty.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/11/2023 20:41:06' prior: 50654010!
test02
	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	Deposit register: 150 on: account. 
	
	self assert: portfolio transactions isEmpty.! !

Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'OA 10/11/2023 20:42:33'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/11/2023 20:42:52' prior: 50653997 overrides: 16920235!
initialize
	accounts := OrderedCollection new.
	portfolios := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/11/2023 20:48:03' prior: 50654003!
transactions
	^accounts copy.! !

!testRun: #PortfolioTest #test01 stamp: 'OA 10/11/2023 20:48:10'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/11/2023 21:03:18' prior: 50654018!
test02
	|portfolio account balances|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	Deposit register: 150 on: account.
	portfolio addAccount: account.
	balances := OrderedCollection new.
	balances add : 0.
	self assert: portfolio transactions = balances.! !

!testRun: #PortfolioTest #test02 stamp: 'OA 10/11/2023 21:03:25'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/11/2023 21:03:25'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'OA 10/11/2023 21:04:05'!
addAccount: anAccount
	accounts add: anAccount.! !

!testRun: #PortfolioTest #test02 stamp: 'OA 10/11/2023 21:04:11'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/11/2023 21:04:11'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/11/2023 21:05:15' prior: 50654053!
test02
	|portfolio account balances|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	Deposit register: 150 on: account.
	portfolio addAccount: account.
	balances := OrderedCollection new.
	balances addLast : 0.
	self assert: portfolio transactions = balances.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/11/2023 21:05:27' prior: 50654069!
addAccount: anAccount
	accounts addLast: anAccount.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/11/2023 21:05:52' prior: 50654079!
test02
	|portfolio account balances|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	Deposit register: 150 on: account.
	portfolio addAccount: account.
	balances := OrderedCollection new.
	balances addLast : 0.
	self assert: portfolio transactions = balances.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/11/2023 21:06:04' prior: 50654096!
test02
	|portfolio account balances|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	Deposit register: 150 on: account.
	portfolio addAccount: account.
	balances := OrderedCollection new.
	balances addLast: 0.
	self assert: portfolio transactions = balances.! !

!testRun: #PortfolioTest #test02 stamp: 'OA 10/11/2023 21:06:23'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/11/2023 21:06:23'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/11/2023 21:09:57' prior: 50654108!
test02
	|portfolio account transactions|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	Deposit register: 150 on: account.
	portfolio addAccount: account.
	transactions := OrderedCollection new.
	self assert: portfolio portfolioTransactions = transactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/11/2023 21:10:42'!
portfolioTransactions
	^accounts copy.! !

!methodRemoval: Portfolio #transactions stamp: 'OA 10/11/2023 21:10:45'!
transactions
	^accounts copy.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/11/2023 21:12:13' prior: 50654137!
portfolioTransactions
	^accounts first transactions.! !

!testRun: #PortfolioTest #test02 stamp: 'OA 10/11/2023 21:12:21'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/11/2023 21:12:21'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'OA 10/11/2023 21:13:04'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'OA 10/11/2023 21:13:04'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/11/2023 21:13:19' prior: 50653991!
test01
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio portfolioTransactions isEmpty.! !

!testRun: #PortfolioTest #test01 stamp: 'OA 10/11/2023 21:13:20'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/11/2023 21:13:20'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'OA 10/11/2023 21:13:25'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'OA 10/11/2023 21:13:25'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/11/2023 21:18:03' prior: 50654145!
portfolioTransactions
"quiero que para todas las cuentas me devuelva sus transacciones osea es un una
collection de collecetions"
	|allTransactions|
	allTransactions := OrderedCollection new.
	accounts do: [:anAccount | allTransactions addLast: anAccount transactions]
	^allTransactions .! !

!testRun: #PortfolioTest #test01 stamp: 'OA 10/11/2023 21:18:08'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/11/2023 21:18:08'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'OA 10/11/2023 21:18:12'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'OA 10/11/2023 21:18:12'!
ERROR!

----QUIT----(11 October 2023 21:20:25) CuisUniversity-5981.image priorSource: 10206196!

----STARTUP---- (12 October 2023 00:01:20) as /home/oscar/Downloads/linux64/linux64/CuisUniversity-5981.image!


!testRun: #PortfolioTest #test01 stamp: 'OA 10/12/2023 00:01:25'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'OA 10/12/2023 00:01:25'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 00:03:02' prior: 50654176!
portfolioTransactions
"quiero que para todas las cuentas me devuelva sus transacciones osea es un una
collection de collecetions"
	|allTransactions|
	allTransactions := OrderedCollection new.
	accounts do: [:anAccount | allTransactions addLast: anAccount transactions].
	^allTransactions .! !

!testRun: #PortfolioTest #test01 stamp: 'OA 10/12/2023 00:03:05'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'OA 10/12/2023 00:03:06'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/12/2023 00:03:07'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/12/2023 00:03:07'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 00:04:19' prior: 50654125!
test02
	|portfolio account transactions|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account.
	transactions := OrderedCollection new.
	self assert: portfolio portfolioTransactions = transactions.! !

!testRun: #PortfolioTest #test02 stamp: 'OA 10/12/2023 00:04:25'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/12/2023 00:04:26'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/12/2023 00:04:36'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 00:07:57' prior: 50654231!
test02
	|portfolio account transactions noTransactions|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account.
	transactions := OrderedCollection new.
	noTransactions := OrderedCollection new.
	self assert: portfolio portfolioTransactions = transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 00:08:13' prior: 50654249!
test02
	|portfolio account transactions noTransactions|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account.
	transactions := OrderedCollection new.
	noTransactions := OrderedCollection new.
	transactions addLast: noTransactions .
	self assert: portfolio portfolioTransactions = transactions.! !

!testRun: #PortfolioTest #test02 stamp: 'OA 10/12/2023 00:08:16'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'OA 10/12/2023 00:08:19'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/12/2023 00:08:19'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 00:14:26'!
test03
	|portfolio account transactions noTransactions|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account.

	transactions := OrderedCollection new.
	self assert: portfolio portfolioTransactions = transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 00:14:31' prior: 50654283!
test03
	|portfolio account transactions|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account.

	transactions := OrderedCollection new.
	self assert: portfolio portfolioTransactions = transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 00:15:09' prior: 50654295!
test03
	|portfolio account transactions|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account.
	Deposit register: 100 on: account. 
	transactions := OrderedCollection new.
	self assert: portfolio portfolioTransactions = transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 00:20:25' prior: 50654306!
test03
	|portfolio account transactions transaction|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account.
	Deposit register: 100 on: account. 
	transactions := OrderedCollection new.
	transaction := account transactions.
	transactions addLast: transaction.
	self assert: portfolio portfolioTransactions = transactions.! !

!testRun: #PortfolioTest #test03 stamp: 'OA 10/12/2023 00:20:27'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 00:21:02' prior: 50654318!
test03
	|portfolio account transactions transaction|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account.
	Deposit register: 100 on: account. 
	Withdraw register: 50 on: account.
	transactions := OrderedCollection new.
	transaction := account transactions.
	transactions addLast: transaction.
	self assert: portfolio portfolioTransactions = transactions.! !

!testRun: #PortfolioTest #test01 stamp: 'OA 10/12/2023 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/12/2023 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'OA 10/12/2023 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'OA 10/12/2023 00:30:04'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/12/2023 00:30:04'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'OA 10/12/2023 00:30:04'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 00:38:11' prior: 50654209!
portfolioTransactions
"quiero que para todas las cuentas me devuelva sus transacciones osea es un una
collection de collecetions"
	|allTransactions|
	allTransactions := OrderedCollection new.
	accounts do: [:anAccount | allTransactions addLast: anAccount transactions].
	^allTransactions .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 00:38:38' prior: 50654335!
test03
	|portfolio account transactions transaction|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account. 
	Deposit register: 100 on: account. 
	Withdraw register: 50 on: account.
	transactions := OrderedCollection new.
	transaction := account transactions.
	transactions addLast: transaction.
	self assert: portfolio portfolioTransactions = transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 00:53:33'!
test04
	|portfolio account aTransaction deposit|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account. 
	deposit := Deposit for: 100.
	
	self assert: portfolio hasRegistered: deposit.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 00:53:43' prior: 50654394!
test04
	|portfolio account  deposit|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account. 
	deposit := Deposit for: 100.
	
	self assert: portfolio hasRegistered: deposit.! !
!Portfolio methodsFor: 'nil' stamp: 'OA 10/12/2023 01:00:16'!
hasRegistered: aTransaction
	|firstThatPasses|
	firstThatPasses := accounts detect: [:account | account includes: aTransaction].
	^ (firstThatPasses = []) not! !

!testRun: #PortfolioTest #test04 stamp: 'OA 10/12/2023 01:01:04'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/12/2023 01:01:04'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 01:01:54' prior: 50654405!
test04
	|portfolio account  deposit|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account. 
	deposit := Deposit for: 100.
	
	self assert: portfolio hasRegistered: deposit.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 01:02:49' prior: 50654427!
test04
	|portfolio account  deposit|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account. 
	deposit := Deposit for: 100.
	
	self assert: portfolio hasRegistered: deposit.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 01:04:52' prior: 50654437!
test04
	|portfolio account  deposit|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account. 
	deposit := Deposit register: 100 on: account.
	
	self assert: portfolio hasRegistered: deposit.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 01:06:20' prior: 50654414!
hasRegistered: aTransaction
	|firstThatPasses|
	firstThatPasses := accounts detect: [:account | account hasRegistered: aTransaction].
	^ (firstThatPasses = []) not! !

!testRun: #PortfolioTest #test01 stamp: 'OA 10/12/2023 01:06:30'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/12/2023 01:06:30'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'OA 10/12/2023 01:06:30'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/12/2023 01:06:30'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/12/2023 01:06:30'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/12/2023 01:06:38'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 01:07:58' prior: 50654447!
test04
	|portfolio account  deposit|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account. 
	deposit := Deposit register: 100 on: account.
	
	self assert: (portfolio hasRegistered: deposit).! !

!testRun: #PortfolioTest #test04 stamp: 'OA 10/12/2023 01:08:02'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'OA 10/12/2023 01:08:06'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/12/2023 01:08:06'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'OA 10/12/2023 01:08:06'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/12/2023 01:08:06'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 01:10:31'!
test01EmptyPortfolio
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio portfolioTransactions isEmpty.! !

!methodRemoval: PortfolioTest #test01 stamp: 'OA 10/12/2023 01:10:35'!
test01
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio portfolioTransactions isEmpty.!

!testRun: #PortfolioTest #test01EmptyPortfolio stamp: 'OA 10/12/2023 01:10:36'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolio stamp: 'OA 10/12/2023 01:10:38'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/12/2023 01:10:38'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'OA 10/12/2023 01:10:38'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/12/2023 01:10:38'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolio stamp: 'OA 10/12/2023 01:10:40'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/12/2023 01:10:40'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'OA 10/12/2023 01:10:40'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/12/2023 01:10:40'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 01:11:28'!
test02WithOneAccountWithoutTransactions
	|portfolio account transactions noTransactions|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account.
	transactions := OrderedCollection new.
	noTransactions := OrderedCollection new.
	transactions addLast: noTransactions .
	self assert: portfolio portfolioTransactions = transactions.! !

!methodRemoval: PortfolioTest #test02 stamp: 'OA 10/12/2023 01:11:32'!
test02
	|portfolio account transactions noTransactions|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account.
	transactions := OrderedCollection new.
	noTransactions := OrderedCollection new.
	transactions addLast: noTransactions .
	self assert: portfolio portfolioTransactions = transactions.!

!testRun: #PortfolioTest #test02WithOneAccountWithoutTransactions stamp: 'OA 10/12/2023 01:11:33'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 01:12:27'!
test01EmptyPortfolioZeroTransactions
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio portfolioTransactions isEmpty.! !

!methodRemoval: PortfolioTest #test01EmptyPortfolio stamp: 'OA 10/12/2023 01:12:27'!
test01EmptyPortfolio
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio portfolioTransactions isEmpty.!

!testRun: #PortfolioTest #test01EmptyPortfolioZeroTransactions stamp: 'OA 10/12/2023 01:12:41'!
PASSED!

!testRun: #PortfolioTest #test02WithOneAccountWithoutTransactions stamp: 'OA 10/12/2023 01:12:43'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 01:13:17'!
test02OneAccountWithoutTransactions
	|portfolio account transactions noTransactions|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account.
	transactions := OrderedCollection new.
	noTransactions := OrderedCollection new.
	transactions addLast: noTransactions .
	self assert: portfolio portfolioTransactions = transactions.! !

!methodRemoval: PortfolioTest #test02WithOneAccountWithoutTransactions stamp: 'OA 10/12/2023 01:13:17'!
test02WithOneAccountWithoutTransactions
	|portfolio account transactions noTransactions|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account.
	transactions := OrderedCollection new.
	noTransactions := OrderedCollection new.
	transactions addLast: noTransactions .
	self assert: portfolio portfolioTransactions = transactions.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 01:15:41'!
test03OneAccountWithOneTransaction
	|portfolio account transactions transaction|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account. 
	Deposit register: 100 on: account. 
	Withdraw register: 50 on: account.
	transactions := OrderedCollection new.
	transaction := account transactions.
	transactions addLast: transaction.
	self assert: portfolio portfolioTransactions = transactions.! !

!methodRemoval: PortfolioTest #test03 stamp: 'OA 10/12/2023 01:15:41'!
test03
	|portfolio account transactions transaction|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account. 
	Deposit register: 100 on: account. 
	Withdraw register: 50 on: account.
	transactions := OrderedCollection new.
	transaction := account transactions.
	transactions addLast: transaction.
	self assert: portfolio portfolioTransactions = transactions.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 01:20:40'!
test04PortfolioHasARegisteredTransaction
	|portfolio account  deposit|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account. 
	deposit := Deposit register: 100 on: account.
	
	self assert: (portfolio hasRegistered: deposit).! !

!methodRemoval: PortfolioTest #test04 stamp: 'OA 10/12/2023 01:20:40'!
test04
	|portfolio account  deposit|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account. 
	deposit := Deposit register: 100 on: account.
	
	self assert: (portfolio hasRegistered: deposit).!

!testRun: #PortfolioTest #test04PortfolioHasARegisteredTransaction stamp: 'OA 10/12/2023 01:21:01'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioZeroTransactions stamp: 'OA 10/12/2023 01:21:04'!
PASSED!

!testRun: #PortfolioTest #test02OneAccountWithoutTransactions stamp: 'OA 10/12/2023 01:21:04'!
PASSED!

!testRun: #PortfolioTest #test03OneAccountWithOneTransaction stamp: 'OA 10/12/2023 01:21:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasARegisteredTransaction stamp: 'OA 10/12/2023 01:21:04'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/12/2023 01:21:17' prior: 50654365!
portfolioTransactions
	|allTransactions|
	allTransactions := OrderedCollection new.
	accounts do: [:anAccount | allTransactions addLast: anAccount transactions].
	^allTransactions .! !

!testRun: #PortfolioTest #test01EmptyPortfolioZeroTransactions stamp: 'OA 10/12/2023 01:23:26'!
PASSED!

!testRun: #PortfolioTest #test02OneAccountWithoutTransactions stamp: 'OA 10/12/2023 01:23:26'!
PASSED!

!testRun: #PortfolioTest #test03OneAccountWithOneTransaction stamp: 'OA 10/12/2023 01:23:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasARegisteredTransaction stamp: 'OA 10/12/2023 01:23:26'!
PASSED!

----QUIT----(12 October 2023 01:23:53) CuisUniversity-5981.image priorSource: 10321483!

----STARTUP---- (14 October 2023 18:53:13) as /home/oscar/Downloads/linux64/linux64/CuisUniversity-5981.image!


!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/14/2023 18:57:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/14/2023 18:57:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/14/2023 18:57:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/14/2023 18:57:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/14/2023 18:57:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/14/2023 18:57:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/14/2023 18:57:15'!
PASSED!

!methodRemoval: PortfolioTest #test02OneAccountWithoutTransactions stamp: 'OA 10/14/2023 19:03:04'!
test02OneAccountWithoutTransactions
	|portfolio account transactions noTransactions|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account.
	transactions := OrderedCollection new.
	noTransactions := OrderedCollection new.
	transactions addLast: noTransactions .
	self assert: portfolio portfolioTransactions = transactions.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/14/2023 19:05:26'!
testXXPortfolioHasARegisteredTransaction
	|portfolio account  deposit|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account. 
	deposit := Deposit register: 100 on: account.
	
	self assert: (portfolio hasRegistered: deposit).! !

!methodRemoval: PortfolioTest #test04PortfolioHasARegisteredTransaction stamp: 'OA 10/14/2023 19:05:26'!
test04PortfolioHasARegisteredTransaction
	|portfolio account  deposit|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account. 
	deposit := Deposit register: 100 on: account.
	
	self assert: (portfolio hasRegistered: deposit).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/14/2023 19:05:35' prior: 50654757!
testXXPortfolioHasARegisteredTransaction
	|portfolio account  deposit|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account. 
	deposit := Deposit register: 100 on: account.
	
	self assert: (portfolio hasRegistered: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/14/2023 19:15:30'!
test04
	|portfolio account  deposit portfolio2 account2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account. 
	deposit := Deposit register: 100 on: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	
	self assert: (portfolio hasRegistered: deposit).! !
!Portfolio methodsFor: 'nil' stamp: 'OA 10/14/2023 19:16:47'!
addPortfolio: aPortfolio
	portfolios addLast: aPortfolio.! !

----QUIT----(14 October 2023 19:25:58) CuisUniversity-5981.image priorSource: 10337885!

----STARTUP---- (16 October 2023 21:44:39) as /home/oscar/Downloads/linux64/linux64/CuisUniversity-5981.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/16/2023 21:44:50' prior: 50654792!
test04
	|portfolio account  deposit portfolio2 account2 deposit2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account. 
	deposit := Deposit register: 100 on: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	deposit2 := Deposit register: 50 on: account2.
	
	self assert: (portfolio hasRegistered: deposit).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/16/2023 21:44:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/16/2023 21:44:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/16/2023 21:44:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/16/2023 21:44:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/16/2023 21:44:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/16/2023 21:44:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/16/2023 21:44:54'!
PASSED!

!methodRemoval: Portfolio #portfolioTransactions stamp: 'OA 10/16/2023 22:07:46'!
portfolioTransactions
	|allTransactions|
	allTransactions := OrderedCollection new.
	accounts do: [:anAccount | allTransactions addLast: anAccount transactions].
	^allTransactions .!

!methodRemoval: Portfolio #hasRegistered: stamp: 'OA 10/16/2023 22:07:50'!
hasRegistered: aTransaction
	|firstThatPasses|
	firstThatPasses := accounts detect: [:account | account hasRegistered: aTransaction].
	^ (firstThatPasses = []) not!

!methodRemoval: PortfolioTest #test01EmptyPortfolioZeroTransactions stamp: 'OA 10/16/2023 22:07:53'!
test01EmptyPortfolioZeroTransactions
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio portfolioTransactions isEmpty.!

!methodRemoval: PortfolioTest #test04 stamp: 'OA 10/16/2023 22:07:54'!
test04
	|portfolio account  deposit portfolio2 account2 deposit2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount  new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account. 
	deposit := Deposit register: 100 on: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	deposit2 := Deposit register: 50 on: account2.
	
	self assert: (portfolio hasRegistered: deposit).!

!methodRemoval: PortfolioTest #test03OneAccountWithOneTransaction stamp: 'OA 10/16/2023 22:07:55'!
test03OneAccountWithOneTransaction
	|portfolio account transactions transaction|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account. 
	Deposit register: 100 on: account. 
	Withdraw register: 50 on: account.
	transactions := OrderedCollection new.
	transaction := account transactions.
	transactions addLast: transaction.
	self assert: portfolio portfolioTransactions = transactions.!

!methodRemoval: PortfolioTest #testXXPortfolioHasARegisteredTransaction stamp: 'OA 10/16/2023 22:07:57'!
testXXPortfolioHasARegisteredTransaction
	|portfolio account  deposit|
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	portfolio addAccount: account. 
	deposit := Deposit register: 100 on: account.
	
	self assert: (portfolio hasRegistered: deposit).!
!PortfolioTest methodsFor: 'nil' stamp: 'OA 10/16/2023 22:08:46'!
test01
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio balance = 0.! !

!testRun: #PortfolioTest #test01 stamp: 'OA 10/16/2023 22:08:55'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'OA 10/16/2023 22:08:55'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'OA 10/16/2023 22:09:10'!
balance
	^0.! !

!testRun: #PortfolioTest #test01 stamp: 'OA 10/16/2023 22:09:12'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/16/2023 22:09:54' prior: 50654930!
test01
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio balance = 0.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/16/2023 22:11:50'!
test02
	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	self assert: portfolio balance = 0.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/16/2023 22:12:43' prior: 50654952!
test02
	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	Deposit register: 100 on: account .
	Withdraw register: 50 on: account.
	self assert: portfolio balance = 0.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/16/2023 22:12:57' prior: 50654961!
test02
	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	Deposit register: 100 on: account .
	Withdraw register: 50 on: account.
	self assert: portfolio balance = 50.! !

!testRun: #PortfolioTest #test02 stamp: 'OA 10/16/2023 22:13:04'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/16/2023 22:13:04'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/16/2023 22:15:43' prior: 50654972!
test02
	|portfolio account account2|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addAccount: account2.
	Deposit register: 200 on: account2.
	Withdraw register: 100 on: account2.
	Deposit register: 100 on: account .
	Withdraw register: 50 on: account.
	self assert: portfolio balance = 150.! !

!testRun: #PortfolioTest #test02 stamp: 'OA 10/16/2023 22:15:47'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/16/2023 22:15:47'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/16/2023 22:18:24' prior: 50654940!
balance
	^accounts inject: 0 into: [:acci :accj | acci balance + accj balance].! !

!testRun: #PortfolioTest #test01 stamp: 'OA 10/16/2023 22:18:31'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/16/2023 22:18:31'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/16/2023 22:18:31'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/16/2023 22:18:51' prior: 50655008!
balance
	^accounts inject: 0 into: [:acci :accj | acci balance + (accj balance)].! !

!testRun: #PortfolioTest #test01 stamp: 'OA 10/16/2023 22:18:52'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/16/2023 22:18:52'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/16/2023 22:18:52'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/16/2023 22:20:01'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/16/2023 22:20:01'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/16/2023 22:21:05' prior: 50655021!
balance
	|sum|
	sum :=0.
	accounts do: [:account | sum := sum + account balance].
	^sum! !

!testRun: #PortfolioTest #test02 stamp: 'OA 10/16/2023 22:21:08'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'OA 10/16/2023 22:21:11'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/16/2023 22:21:11'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/16/2023 22:36:35'!
test03
	|portfolio account account2 portfolio2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	Deposit register: 200 on: account2.
	Withdraw register: 100 on: account2.
	Deposit register: 100 on: account .
	Withdraw register: 50 on: account.
	self assert: portfolio balance = 150.! !

!testRun: #PortfolioTest #test03 stamp: 'OA 10/16/2023 22:36:38'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'OA 10/16/2023 22:36:38'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/16/2023 22:37:58' prior: 50655039!
balance
	|sum|
	sum :=0.
	accounts do: [:account | sum := sum + account balance].
	portfolios do: [:portfolio | sum := sum + portfolio balance].
	^sum! !

!testRun: #PortfolioTest #test01 stamp: 'OA 10/16/2023 22:38:01'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'OA 10/16/2023 22:38:01'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'OA 10/16/2023 22:38:01'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/16/2023 22:38:27'!
test01newPortfolioHasZeroBalance
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio balance = 0.! !

!methodRemoval: PortfolioTest #test01 stamp: 'OA 10/16/2023 22:38:30'!
test01
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio balance = 0.!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/16/2023 22:38:32'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/16/2023 22:40:17'!
test02portfolioBalanceIsTheSumOfEachAccountBalance
	|portfolio account account2|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addAccount: account2.
	Deposit register: 200 on: account2.
	Withdraw register: 100 on: account2.
	Deposit register: 100 on: account .
	Withdraw register: 50 on: account.
	self assert: portfolio balance = 150.! !

!methodRemoval: PortfolioTest #test02 stamp: 'OA 10/16/2023 22:40:17'!
test02
	|portfolio account account2|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addAccount: account2.
	Deposit register: 200 on: account2.
	Withdraw register: 100 on: account2.
	Deposit register: 100 on: account .
	Withdraw register: 50 on: account.
	self assert: portfolio balance = 150.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/16/2023 22:41:46'!
test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances
	|portfolio account account2 portfolio2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	Deposit register: 200 on: account2.
	Withdraw register: 100 on: account2.
	Deposit register: 100 on: account .
	Withdraw register: 50 on: account.
	self assert: portfolio balance = 150.! !

!methodRemoval: PortfolioTest #test03 stamp: 'OA 10/16/2023 22:41:46'!
test03
	|portfolio account account2 portfolio2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	Deposit register: 200 on: account2.
	Withdraw register: 100 on: account2.
	Deposit register: 100 on: account .
	Withdraw register: 50 on: account.
	self assert: portfolio balance = 150.!
!PortfolioTest methodsFor: 'nil' stamp: 'OA 10/16/2023 23:50:27'!
test04
	|portfolio|
	portfolio := Portfolio new.
	
	self deny: portfolio hasRegistered.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/16/2023 23:52:12' prior: 50655172!
test04
	|portfolio deposit|
	portfolio := Portfolio new.
	deposit := Deposit for: 200.
	self deny: (portfolio hasRegistered: deposit).! !
!Portfolio methodsFor: 'nil' stamp: 'OA 10/16/2023 23:55:22'!
hasRegistered: aTransaction
	^false.! !

!testRun: #PortfolioTest #test04 stamp: 'OA 10/16/2023 23:55:24'!
PASSED!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/16/2023 23:55:27'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/16/2023 23:55:27'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/16/2023 23:55:27'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/16/2023 23:55:27'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/16/2023 23:59:26'!
test05
	|portfolio deposit account deposit2|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	Deposit register: 100 on: account.
	deposit2 := Deposit for: 100.
	deposit := Deposit for: 200.
	
	self assert: (portfolio hasRegistered: deposit2).
	self deny: (portfolio hasRegistered: deposit).! !

!testRun: #PortfolioTest #test05 stamp: 'OA 10/16/2023 23:59:29'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/16/2023 23:59:29'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 00:36:33' prior: 50655185!
hasRegistered: aTransaction
	|tmp|
	tmp := accounts detect: [:account | account hasRegistered: aTransaction].
	(tmp = []) ifTrue: [^false].
	^true.! !

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 00:36:36'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 00:36:36'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 00:38:22'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 00:38:22'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 00:39:06'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 00:39:06'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 00:42:02' prior: 50655224!
hasRegistered: aTransaction
	|tmp|
	tmp := accounts detect: [:account | account hasRegistered: aTransaction].
	(tmp = []) ifTrue: [^false].
	^true.! !

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 00:42:25'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 00:42:25'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 00:42:28'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 00:42:28'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 00:45:11' prior: 50655246!
hasRegistered: aTransaction
	|tmp|
	tmp := accounts detect: [:account | account hasRegistered: aTransaction] 
						ifNone: [^false].
	^true.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 00:45:24' prior: 50655263!
hasRegistered: aTransaction
	accounts detect: [:account | account hasRegistered: aTransaction] 
						ifNone: [^false].
	^true.! !

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 00:45:28'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 00:45:29'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 00:45:29'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 00:45:58'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 00:45:58'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 00:49:05' prior: 50655205!
test05
	|portfolio deposit account deposit2|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	deposit2 := Deposit register: 100 on: account.
	deposit := Deposit for: 200.
	
	self assert: (portfolio hasRegistered: deposit2).
	self deny: (portfolio hasRegistered: deposit).! !

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 00:49:09'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 00:49:13'!
PASSED!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 00:49:16'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 00:49:16'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 00:49:16'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 00:49:16'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 00:49:16'!
PASSED!

----QUIT----(17 October 2023 00:55:06) CuisUniversity-5981.image priorSource: 10341148!

----STARTUP---- (17 October 2023 12:35:34) as /home/oscar/Downloads/linux64/linux64/CuisUniversity-5981.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 12:35:44' prior: 50655290!
test05
	|portfolio deposit account deposit2|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	deposit2 := Deposit register: 100 on: account.
	deposit := Deposit for: 200.
	
	self assert: (portfolio hasRegistered: deposit2).
	self deny: (portfolio hasRegistered: deposit).! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 12:35:47'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 12:35:47'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 12:35:47'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 12:35:47'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 12:35:47'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 12:54:07'!
test06
	|portfolio portfolio2 deposit account account2 deposit2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 :=ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	deposit2 := Deposit register: 50 on: account2.
	deposit := Deposit for: 70.
	
	self assert: (portfolio hasRegistered: deposit2).
	self deny: (portfolio hasRegistered: deposit).! !

!testRun: #PortfolioTest #test06 stamp: 'OA 10/17/2023 12:55:56'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/17/2023 12:55:56'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 12:58:23' prior: 50655271!
hasRegistered: aTransaction
	accounts detect: [:account | account hasRegistered: aTransaction].
	portfolios detect: [:portfolio | portfolio hasRegistered: aTransaction] ifNone: [^false].
	^true.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 12:58:27'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 12:58:27'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 12:58:27'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 12:58:27'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 12:58:27'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/17/2023 12:58:27'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 12:58:33'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 12:58:33'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 13:01:19' prior: 50655384!
hasRegistered: aTransaction
	accounts detect: [:account | account hasRegistered: aTransaction] ifNone: [^self].
	portfolios detect: [:portfolio | portfolio hasRegistered: aTransaction] ifNone: [^false].
	^true.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 13:01:23'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 13:01:23'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 13:01:23'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 13:01:23'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 13:01:23'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/17/2023 13:01:23'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 13:01:31'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 13:14:59' prior: 50655416!
hasRegistered: aTransaction
	|foundInAccounts foundInPortfolios|
	foundInAccounts := false.
	foundInPortfolios := false.
	foundInAccounts := accounts detect: [:account | account hasRegistered: aTransaction]
						 	ifNone: [false].
	foundInPortfolios := portfolios detect: [:portfolio | portfolio hasRegistered: aTransaction] 
							 ifNone: [false].
	(foundInAccounts or: foundInPortfolios) ifTrue: [^true].	
	^false.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 13:15:02'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 13:15:02'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 13:15:02'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 13:15:02'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 13:15:02'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/17/2023 13:15:02'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 13:15:08'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 13:15:08'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 13:16:57' prior: 50655446!
hasRegistered: aTransaction
	|foundInAccounts foundInPortfolios|
	foundInAccounts := false.
	foundInPortfolios := false.
	foundInAccounts := accounts detect: [:account | account hasRegistered: aTransaction]
						 	ifNone: [false].
	foundInPortfolios := portfolios detect: [:portfolio | portfolio hasRegistered: aTransaction] 
							 ifNone: [false].
	((foundInAccounts=false) and: (foundInPortfolios=false)) ifTrue: [^false].	
	^true.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 13:17:00'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 13:17:00'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 13:17:00'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 13:17:00'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 13:17:00'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/17/2023 13:17:00'!
PASSED!
!PortfolioTest methodsFor: 'nil' stamp: 'OA 10/17/2023 15:25:54'!
test07
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio transactions = (OrderedCollection new).! !
!Portfolio methodsFor: 'nil' stamp: 'OA 10/17/2023 15:27:11'!
transactions
	^OrderedCollection new.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 15:27:17'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 15:27:17'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 15:27:17'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 15:27:17'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 15:27:17'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/17/2023 15:27:17'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'OA 10/17/2023 15:27:17'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 15:50:05'!
test08
	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	
	
	self assert: portfolio transactions = (OrderedCollection new).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 15:55:53' prior: 50655550!
test08
	|portfolio account transactions deposit withdraw|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactions := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions = transactions.! !

!testRun: #PortfolioTest #test07 stamp: 'OA 10/17/2023 15:55:58'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/17/2023 15:56:01'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/17/2023 15:56:01'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 15:59:50' prior: 50655525!
transactions
	|transactions|
	transactions := OrderedCollection new.
	accounts do: [:account | transactions addLast: (account transactions)].
	^transactions.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 15:59:52'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 15:59:52'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 15:59:52'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 15:59:52'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 15:59:52'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/17/2023 15:59:52'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'OA 10/17/2023 15:59:52'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/17/2023 15:59:52'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/17/2023 15:59:52'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 16:01:10' prior: 50655560!
test08
	|portfolio account transactions deposit withdraw|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactions := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions = (OrderedCollection with: transactions).! !

!testRun: #PortfolioTest #test08 stamp: 'OA 10/17/2023 16:01:11'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'OA 10/17/2023 16:01:14'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/17/2023 16:01:16'!
PASSED!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 16:03:13'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 16:03:13'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 16:03:13'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 16:03:13'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 16:03:13'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/17/2023 16:03:13'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'OA 10/17/2023 16:03:13'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/17/2023 16:03:13'!
PASSED!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 16:09:45'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 16:09:45'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 16:09:45'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/17/2023 16:09:45'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 16:09:45'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/17/2023 16:09:45'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'OA 10/17/2023 16:09:45'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/17/2023 16:09:45'!
PASSED!

----QUIT----(17 October 2023 16:09:49) CuisUniversity-5981.image priorSource: 10357515!

----STARTUP---- (17 October 2023 17:30:24) as /home/oscar/Downloads/linux64/linux64/CuisUniversity-5981.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 17:30:55' prior: 50655178!
test04
	|portfolio deposit|
	portfolio := Portfolio new.
	deposit := Deposit for: 200.
	self deny: (portfolio hasRegistered: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 17:31:35'!
test04newPortfolioHasNoTransactions
	|portfolio deposit|
	portfolio := Portfolio new.
	deposit := Deposit for: 200.
	self deny: (portfolio hasRegistered: deposit).! !

!methodRemoval: PortfolioTest #test04 stamp: 'OA 10/17/2023 17:31:35'!
test04
	|portfolio deposit|
	portfolio := Portfolio new.
	deposit := Deposit for: 200.
	self deny: (portfolio hasRegistered: deposit).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 17:38:50'!
test09
	|portfolio portfolio2 account account2 transactionsAcc transactionsAcc2 deposit withdraw|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactionsAcc := OrderedCollection with: deposit with: withdraw.
	deposit := Deposit register: 200 on: account2.
	withdraw := Withdraw register: 75 on: account2.
	transactionsAcc2 := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions =
			 (OrderedCollection with: transactionsAcc with: transactionsAcc2).! !

!testRun: #PortfolioTest #test09 stamp: 'OA 10/17/2023 17:39:00'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'OA 10/17/2023 17:39:00'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 17:41:03' prior: 50655582!
transactions
	|transactions|
	transactions := OrderedCollection new.
	accounts do: [:account | transactions addLast: (account transactions)].
	portfolios do: [:portfolio | transactions addLast: (portfolio transactions)].
	^transactions.! !

!testRun: #PortfolioTest #test09 stamp: 'OA 10/17/2023 17:41:06'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'OA 10/17/2023 17:41:06'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 17:42:11' prior: 50655713!
test09
	|portfolio portfolio2 account account2 transactionsAcc transactionsAcc2 deposit withdraw|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactionsAcc := OrderedCollection with: deposit with: withdraw.
	deposit := Deposit register: 200 on: account2.
	withdraw := Withdraw register: 75 on: account2.
	transactionsAcc2 := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions =
			 (OrderedCollection with: transactionsAcc 
							   with: (OrderedCollection with: transactionsAcc2)).! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 17:42:14'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 17:42:14'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 17:42:14'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioHasNoTransactions stamp: 'OA 10/17/2023 17:42:14'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 17:42:14'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/17/2023 17:42:14'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'OA 10/17/2023 17:42:14'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/17/2023 17:42:14'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'OA 10/17/2023 17:42:14'!
PASSED!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 17:46:12'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 17:46:12'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 17:46:12'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioHasNoTransactions stamp: 'OA 10/17/2023 17:46:12'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/17/2023 17:46:12'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/17/2023 17:46:12'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'OA 10/17/2023 17:46:12'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/17/2023 17:46:12'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'OA 10/17/2023 17:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/17/2023 17:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/17/2023 17:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/17/2023 17:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/17/2023 17:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/17/2023 17:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/17/2023 17:46:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/17/2023 17:46:12'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 17:46:21'!
test05portfolioKnowsAccountsTransactions
	|portfolio deposit account deposit2|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	deposit2 := Deposit register: 100 on: account.
	deposit := Deposit for: 200.
	
	self assert: (portfolio hasRegistered: deposit2).
	self deny: (portfolio hasRegistered: deposit).! !

!methodRemoval: PortfolioTest #test05 stamp: 'OA 10/17/2023 17:46:21'!
test05
	|portfolio deposit account deposit2|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	deposit2 := Deposit register: 100 on: account.
	deposit := Deposit for: 200.
	
	self assert: (portfolio hasRegistered: deposit2).
	self deny: (portfolio hasRegistered: deposit).!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 17:46:30'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 17:46:30'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 17:46:30'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioHasNoTransactions stamp: 'OA 10/17/2023 17:46:30'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsAccountsTransactions stamp: 'OA 10/17/2023 17:46:30'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/17/2023 17:46:30'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'OA 10/17/2023 17:46:30'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/17/2023 17:46:30'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'OA 10/17/2023 17:46:30'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 17:48:04'!
test06portfolioKnowsAllTransactionsInsideOfIt
	|portfolio portfolio2 deposit account account2 deposit2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 :=ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	deposit2 := Deposit register: 50 on: account2.
	deposit := Deposit for: 70.
	
	self assert: (portfolio hasRegistered: deposit2).
	self deny: (portfolio hasRegistered: deposit).! !

!methodRemoval: PortfolioTest #test06 stamp: 'OA 10/17/2023 17:48:04'!
test06
	|portfolio portfolio2 deposit account account2 deposit2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 :=ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	deposit2 := Deposit register: 50 on: account2.
	deposit := Deposit for: 70.
	
	self assert: (portfolio hasRegistered: deposit2).
	self deny: (portfolio hasRegistered: deposit).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 17:48:26'!
test07newPortfolioHasNoTransactions
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio transactions = (OrderedCollection new).! !

!methodRemoval: PortfolioTest #test07 stamp: 'OA 10/17/2023 17:48:26'!
test07
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio transactions = (OrderedCollection new).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 17:50:34'!
test07newPortfolioWithoutTransactions
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio transactions = (OrderedCollection new).! !

!methodRemoval: PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/17/2023 17:50:34'!
test07newPortfolioHasNoTransactions
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio transactions = (OrderedCollection new).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 17:51:21'!
test08portfolioWithAccountsKnowsTransactions
	|portfolio account transactions deposit withdraw|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactions := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions = (OrderedCollection with: transactions).! !

!methodRemoval: PortfolioTest #test08 stamp: 'OA 10/17/2023 17:51:21'!
test08
	|portfolio account transactions deposit withdraw|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactions := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions = (OrderedCollection with: transactions).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 17:51:35'!
test08portfolioWithAccountsAndPortfoliosKnowsTransactions
	|portfolio account transactions deposit withdraw|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactions := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions = (OrderedCollection with: transactions).! !

!methodRemoval: PortfolioTest #test08portfolioWithAccountsKnowsTransactions stamp: 'OA 10/17/2023 17:51:35'!
test08portfolioWithAccountsKnowsTransactions
	|portfolio account transactions deposit withdraw|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactions := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions = (OrderedCollection with: transactions).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 17:51:50'!
test08portfolioWithAccountsKnowsTransactions
	|portfolio account transactions deposit withdraw|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactions := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions = (OrderedCollection with: transactions).! !

!methodRemoval: PortfolioTest #test08portfolioWithAccountsAndPortfoliosKnowsTransactions stamp: 'OA 10/17/2023 17:51:50'!
test08portfolioWithAccountsAndPortfoliosKnowsTransactions
	|portfolio account transactions deposit withdraw|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactions := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions = (OrderedCollection with: transactions).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 17:52:13'!
test09portfolioWithAccountsAndPortfoliosKnowsTransactions
	|portfolio portfolio2 account account2 transactionsAcc transactionsAcc2 deposit withdraw|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactionsAcc := OrderedCollection with: deposit with: withdraw.
	deposit := Deposit register: 200 on: account2.
	withdraw := Withdraw register: 75 on: account2.
	transactionsAcc2 := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions =
			 (OrderedCollection with: transactionsAcc 
							   with: (OrderedCollection with: transactionsAcc2)).! !

!methodRemoval: PortfolioTest #test09 stamp: 'OA 10/17/2023 17:52:13'!
test09
	|portfolio portfolio2 account account2 transactionsAcc transactionsAcc2 deposit withdraw|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactionsAcc := OrderedCollection with: deposit with: withdraw.
	deposit := Deposit register: 200 on: account2.
	withdraw := Withdraw register: 75 on: account2.
	transactionsAcc2 := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions =
			 (OrderedCollection with: transactionsAcc 
							   with: (OrderedCollection with: transactionsAcc2)).!
!ReceptiveAccount methodsFor: 'balance' stamp: 'OA 10/17/2023 17:57:35' prior: 50651034!
balance
	"|sum|
	sum := 0.
	transactions do: [:aTransaction | sum := aTransaction m1: sum].
	
	^sum"
	^transactions inject: 0 into: [:accumulator :aTransaction | aTransaction m1: accumulator].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/17/2023 17:57:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/17/2023 17:57:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/17/2023 17:57:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/17/2023 17:57:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/17/2023 17:57:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/17/2023 17:57:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/17/2023 17:57:40'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'OA 10/17/2023 17:57:53' prior: 50656148!
balance
	^transactions inject: 0 into: [:accumulator :aTransaction | aTransaction m1: accumulator].! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 17:58:49'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 17:58:49'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 17:58:49'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioHasNoTransactions stamp: 'OA 10/17/2023 17:58:49'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsAccountsTransactions stamp: 'OA 10/17/2023 17:58:49'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsAllTransactionsInsideOfIt stamp: 'OA 10/17/2023 17:58:49'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioWithoutTransactions stamp: 'OA 10/17/2023 17:58:49'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsKnowsTransactions stamp: 'OA 10/17/2023 17:58:49'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosKnowsTransactions stamp: 'OA 10/17/2023 17:58:49'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 18:05:30' prior: 50655075!
balance
	|accountSum portfolioSum|
	accountSum := accounts inject: 0 into:
						 [:accumulator : account | accumulator + account balance].
	portfolioSum := portfolios inject: 0 into:
						 [:accumulator :portfolio | accumulator + portfolio balance].
	^accountSum + portfolioSum.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 18:05:34'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 18:05:34'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 18:05:34'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioHasNoTransactions stamp: 'OA 10/17/2023 18:05:34'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsAccountsTransactions stamp: 'OA 10/17/2023 18:05:34'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsAllTransactionsInsideOfIt stamp: 'OA 10/17/2023 18:05:34'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioWithoutTransactions stamp: 'OA 10/17/2023 18:05:34'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsKnowsTransactions stamp: 'OA 10/17/2023 18:05:34'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosKnowsTransactions stamp: 'OA 10/17/2023 18:05:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/17/2023 18:05:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/17/2023 18:05:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/17/2023 18:05:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/17/2023 18:05:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/17/2023 18:05:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/17/2023 18:05:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/17/2023 18:05:39'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 18:09:26' prior: 50655485!
hasRegistered: aTransaction
	|foundInAccounts foundInPortfolios|
	foundInAccounts := false.
	foundInPortfolios := false.
	foundInAccounts := accounts detect: [:account | account hasRegistered: aTransaction]
						 	ifNone: [false].
	foundInPortfolios := portfolios detect: [:portfolio | portfolio hasRegistered: aTransaction] 
							 ifNone: [false].
	((foundInAccounts=false) and: [foundInPortfolios=false]) ifTrue: [^false].	
	^true.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 18:09:29'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 18:09:29'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 18:09:29'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioHasNoTransactions stamp: 'OA 10/17/2023 18:09:29'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsAccountsTransactions stamp: 'OA 10/17/2023 18:09:29'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsAllTransactionsInsideOfIt stamp: 'OA 10/17/2023 18:09:29'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioWithoutTransactions stamp: 'OA 10/17/2023 18:09:29'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsKnowsTransactions stamp: 'OA 10/17/2023 18:09:29'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosKnowsTransactions stamp: 'OA 10/17/2023 18:09:29'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 18:20:28' prior: 50656223!
balance
	|accountSum portfolioSum|
	accountSum := accounts inject: 0 into:
						 [:accumulator : account | accumulator + account balance].
	portfolioSum := portfolios inject: 0 into:
						 [:accumulator :portfolio | accumulator + portfolio balance].
	^accountSum + portfolioSum.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 18:21:26' prior: 50656294!
hasRegistered: aTransaction
	|foundInAccounts foundInPortfolios|
	foundInAccounts := false.
	foundInPortfolios := false.
	foundInAccounts := accounts detect: [:account | account hasRegistered: aTransaction].
	foundInPortfolios := portfolios detect: [:portfolio | portfolio hasRegistered: aTransaction] 
							 ifNone: [false].
	((foundInAccounts=false) and: [foundInPortfolios=false]) ifTrue: [^false].	
	^true.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 18:21:28'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 18:21:28'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 18:21:28'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioHasNoTransactions stamp: 'OA 10/17/2023 18:21:28'!
ERROR!

!testRun: #PortfolioTest #test05portfolioKnowsAccountsTransactions stamp: 'OA 10/17/2023 18:21:28'!
ERROR!

!testRun: #PortfolioTest #test06portfolioKnowsAllTransactionsInsideOfIt stamp: 'OA 10/17/2023 18:21:28'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioWithoutTransactions stamp: 'OA 10/17/2023 18:21:28'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsKnowsTransactions stamp: 'OA 10/17/2023 18:21:28'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosKnowsTransactions stamp: 'OA 10/17/2023 18:21:28'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 18:09:26' prior: 50656355!
hasRegistered: aTransaction
	|foundInAccounts foundInPortfolios|
	foundInAccounts := false.
	foundInPortfolios := false.
	foundInAccounts := accounts detect: [:account | account hasRegistered: aTransaction]
						 	ifNone: [false].
	foundInPortfolios := portfolios detect: [:portfolio | portfolio hasRegistered: aTransaction] 
							 ifNone: [false].
	((foundInAccounts=false) and: [foundInPortfolios=false]) ifTrue: [^false].	
	^true.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'OA 10/17/2023 18:23:26' prior: 50656184!
balance
	^transactions inject: 0 into: [:accumulator :aTransaction |
							 aTransaction updateBalanceOf: accumulator].! !
!AccountTransaction methodsFor: 'value' stamp: 'OA 10/17/2023 18:24:23'!
updateBalanceOf! !
!Deposit methodsFor: 'value' stamp: 'OA 10/17/2023 18:24:26' overrides: 50656427!
updateBalanceOf! !
!Withdraw methodsFor: 'value' stamp: 'OA 10/17/2023 18:24:26' overrides: 50656427!
updateBalanceOf! !
!AccountTransaction methodsFor: 'value' stamp: 'OA 10/17/2023 18:24:26' prior: 50656427!
updateBalanceOf

	self subclassResponsibility! !
!Deposit methodsFor: 'value' stamp: 'OA 10/17/2023 18:25:03'!
updateBalanceOf: anAccumulator
	^ anAccumulator + value! !

!methodRemoval: Deposit #updateBalanceOf stamp: 'OA 10/17/2023 18:25:08'!
updateBalanceOf!
!Withdraw methodsFor: 'value' stamp: 'OA 10/17/2023 18:25:32'!
updateBalanceOf: anAccumulator
	^anAccumulator - value! !

!methodRemoval: Withdraw #m1: stamp: 'OA 10/17/2023 18:25:36'!
m1: anAccumulator
	^anAccumulator - value.!

!methodRemoval: Withdraw #updateBalanceOf stamp: 'OA 10/17/2023 18:25:38'!
updateBalanceOf!

!methodRemoval: Deposit #m1: stamp: 'OA 10/17/2023 18:25:42'!
m1: anAccumulator
	^anAccumulator +value.!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/17/2023 18:25:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/17/2023 18:25:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/17/2023 18:25:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/17/2023 18:25:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/17/2023 18:25:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/17/2023 18:25:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/17/2023 18:25:52'!
PASSED!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/17/2023 18:25:55'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/17/2023 18:25:55'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/17/2023 18:25:55'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioHasNoTransactions stamp: 'OA 10/17/2023 18:25:55'!
PASSED!

!testRun: #PortfolioTest #test05portfolioKnowsAccountsTransactions stamp: 'OA 10/17/2023 18:25:55'!
PASSED!

!testRun: #PortfolioTest #test06portfolioKnowsAllTransactionsInsideOfIt stamp: 'OA 10/17/2023 18:25:55'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioWithoutTransactions stamp: 'OA 10/17/2023 18:25:55'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsKnowsTransactions stamp: 'OA 10/17/2023 18:25:55'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosKnowsTransactions stamp: 'OA 10/17/2023 18:25:55'!
PASSED!

!classDefinition: #PortfolioClass category: 'Portfolio-Ejercicio' stamp: 'OA 10/17/2023 18:28:06'!
Object subclass: #PortfolioClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'OA 10/17/2023 18:28:06'!
PortfolioClass subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioClass subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'OA 10/17/2023 18:28:54'!
PortfolioClass subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioClass methodsFor: 'nil' stamp: 'OA 10/17/2023 18:31:45'!
balance
	^self subclassResponsibility! !
!PortfolioClass methodsFor: 'nil' stamp: 'OA 10/17/2023 18:32:34'!
hasRegistered: aTransaction
	^self subclassResponsibility.! !
!PortfolioClass methodsFor: 'nil' stamp: 'OA 10/17/2023 18:32:58'!
transactions
	^self subclassResponsibility! !

Object subclass: #PortfolioClass
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioClass category: 'Portfolio-Ejercicio' stamp: 'OA 10/17/2023 18:42:37'!
Object subclass: #PortfolioClass
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioClass methodsFor: 'nil' stamp: 'OA 10/17/2023 18:43:17' overrides: 16920235!
initialize
	elements := OrderedCollection new.! !
!PortfolioClass methodsFor: 'nil' stamp: 'OA 10/17/2023 18:46:29'!
addElement: anElement
	^self subclassResponsibility! !

!methodRemoval: Portfolio #addAccount: stamp: 'OA 10/17/2023 18:50:44'!
addAccount: anAccount
	accounts addLast: anAccount.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 18:51:58' overrides: 50656581!
addElement: anElement
	elements addLast: anElement.! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'OA 10/17/2023 18:53:07' overrides: 50656581!
addElement: anAccount
	elements addLast: anAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/17/2023 18:53:56' prior: 50656590 overrides: 50656581!
addElement: aPortfolio
	elements addLast: aPortfolio.! !

----STARTUP---- (18 October 2023 22:47:57) as /home/oscar/Downloads/linux64/linux64/CuisUniversity-5981.image!


!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/18/2023 22:48:05'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/18/2023 22:48:05'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/18/2023 22:48:05'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/18/2023 22:48:05'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/18/2023 22:48:05'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/18/2023 22:48:05'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'OA 10/18/2023 22:48:05'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/18/2023 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/18/2023 22:48:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/18/2023 22:48:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/18/2023 22:48:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/18/2023 22:48:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/18/2023 22:48:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/18/2023 22:48:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/18/2023 22:48:07'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/18/2023 23:30:16'!
test09
	|portfolio portfolio2 account account2 transactions deposit withdraw|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactions := OrderedCollection with: deposit with: withdraw.
	deposit := Deposit register: 200 on: account2.
	withdraw := Withdraw register: 75 on: account2.
	
	self assert: portfolio transactions = (OrderedCollection with: transactions
			with: (OrderedCollection with: deposit with: withdraw)).! !

!testRun: #PortfolioTest #test09 stamp: 'OA 10/18/2023 23:30:30'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'OA 10/18/2023 23:30:30'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/18/2023 23:31:21' prior: 50655582!
transactions
	|transactions|
	transactions := OrderedCollection new.
	accounts do: [:account | transactions addLast: (account transactions)].
	portfolios do: [:portfolio | transactions addLast: (portfolio transactions)].
	^transactions.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/18/2023 23:31:23'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/18/2023 23:31:23'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/18/2023 23:31:23'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/18/2023 23:31:23'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/18/2023 23:31:23'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/18/2023 23:31:23'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'OA 10/18/2023 23:31:23'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/18/2023 23:31:23'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'OA 10/18/2023 23:31:23'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'OA 10/18/2023 23:31:23'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/18/2023 23:31:53'!
PASSED!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/18/2023 23:31:56'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/18/2023 23:31:56'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/18/2023 23:31:56'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/18/2023 23:31:56'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/18/2023 23:31:56'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/18/2023 23:31:56'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'OA 10/18/2023 23:31:56'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/18/2023 23:31:56'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'OA 10/18/2023 23:31:56'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'OA 10/18/2023 23:31:56'!
FAILURE!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/18/2023 23:35:10'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/18/2023 23:35:10'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/18/2023 23:35:10'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/18/2023 23:35:10'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/18/2023 23:35:10'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/18/2023 23:35:10'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'OA 10/18/2023 23:35:10'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/18/2023 23:35:10'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'OA 10/18/2023 23:35:10'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'OA 10/18/2023 23:35:10'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/18/2023 23:37:18' prior: 50655739!
test09
	|portfolio portfolio2 account account2 transactions deposit withdraw transactions2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactions := OrderedCollection with: deposit with: withdraw.
	deposit := Deposit register: 200 on: account2.
	withdraw := Withdraw register: 75 on: account2.
	transactions2 := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions = (OrderedCollection with: transactions
			with: (OrderedCollection with: transactions2)).! !

!testRun: #PortfolioTest #test09 stamp: 'OA 10/18/2023 23:37:21'!
PASSED!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/18/2023 23:37:25'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/18/2023 23:37:25'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/18/2023 23:37:25'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'OA 10/18/2023 23:37:25'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/18/2023 23:37:25'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/18/2023 23:37:25'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'OA 10/18/2023 23:37:25'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/18/2023 23:37:25'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'OA 10/18/2023 23:37:25'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/18/2023 23:38:40'!
test04newPortfolioWithoutRegisteredTransactions
	|portfolio deposit|
	portfolio := Portfolio new.
	deposit := Deposit for: 200.
	self deny: (portfolio hasRegistered: deposit).! !

!methodRemoval: PortfolioTest #test04 stamp: 'OA 10/18/2023 23:38:40'!
test04
	|portfolio deposit|
	portfolio := Portfolio new.
	deposit := Deposit for: 200.
	self deny: (portfolio hasRegistered: deposit).!
!ReceptiveAccount methodsFor: 'balance' stamp: 'OA 10/18/2023 23:42:00' prior: 50651034!
balance
	transactions inject: 0 into: [:accumulator :aTransaction | 		
						accumulator + aTransaction m1: accumulator].
	"|sum|
	sum := 0.
	transactions do: [:aTransaction | sum := aTransaction m1: sum].
	
	^sum"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/18/2023 23:42:03'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/18/2023 23:42:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/18/2023 23:42:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/18/2023 23:42:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/18/2023 23:42:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/18/2023 23:42:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/18/2023 23:42:03'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'OA 10/18/2023 23:42:34' prior: 50655935!
balance
	^transactions inject: 0 into: [:accumulator :aTransaction | 		
						accumulator + aTransaction m1: accumulator].
	"|sum|
	sum := 0.
	transactions do: [:aTransaction | sum := aTransaction m1: sum].
	
	^sum"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/18/2023 23:42:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/18/2023 23:42:36'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/18/2023 23:42:36'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/18/2023 23:42:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/18/2023 23:42:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/18/2023 23:42:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/18/2023 23:42:36'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'OA 10/18/2023 23:42:53' prior: 50655972!
balance
	"^transactions inject: 0 into: [:accumulator :aTransaction | 		
						accumulator + aTransaction m1: accumulator]."
	|sum|
	sum := 0.
	transactions do: [:aTransaction | sum := aTransaction m1: sum].
	
	^sum! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/18/2023 23:42:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/18/2023 23:42:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/18/2023 23:42:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/18/2023 23:42:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/18/2023 23:42:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/18/2023 23:42:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/18/2023 23:42:54'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'OA 10/18/2023 23:44:14' prior: 50656009!
balance
	^transactions inject: 0 into: [:accumulator :aTransaction | 		
								aTransaction m1: accumulator].
	"|sum|
	sum := 0.
	transactions do: [:aTransaction | sum := aTransaction m1: sum].
	
	^sum"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/18/2023 23:44:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/18/2023 23:44:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/18/2023 23:44:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/18/2023 23:44:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/18/2023 23:44:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/18/2023 23:44:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/18/2023 23:44:16'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'OA 10/18/2023 23:53:47' prior: 50656046!
balance
	^transactions inject: 0 into: [:accumulator :aTransaction | 		
								aTransaction m1: accumulator].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/18/2023 23:56:08' prior: 50655075!
balance
	|accountsBalance portfoliosBalance|
	accountsBalance := accounts inject: 0 into: [:sum :account | sum+ account balance].
	portfoliosBalance := portfolios do: [:sum :portfolio | sum + portfolio balance].
	
	^accountsBalance + portfoliosBalance.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/18/2023 23:56:11'!
FAILURE!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/18/2023 23:56:11'!
FAILURE!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/18/2023 23:56:11'!
ERROR!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/18/2023 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/18/2023 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/18/2023 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'OA 10/18/2023 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/18/2023 23:56:11'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'OA 10/18/2023 23:56:11'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/18/2023 23:56:27' prior: 50656089!
balance
	|accountsBalance portfoliosBalance|
	accountsBalance := accounts inject: 0 into: [:sum :account | sum+ account balance].
	portfoliosBalance := portfolios inject:0 into: [:sum :portfolio | sum + portfolio balance].
	
	^accountsBalance + portfoliosBalance.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/18/2023 23:56:29'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/18/2023 23:56:29'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/18/2023 23:56:29'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/18/2023 23:56:29'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/18/2023 23:56:29'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/18/2023 23:56:29'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'OA 10/18/2023 23:56:29'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/18/2023 23:56:29'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'OA 10/18/2023 23:56:29'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'OA 10/18/2023 23:59:18' prior: 50656082!
balance
	^transactions inject: 0 into: [:sum :aTransaction | 		
								aTransaction m1: sum].! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 00:00:09'!
computeOn: anAccumulator
	^anAccumulator +value.! !

!methodRemoval: Deposit #m1: stamp: 'OA 10/19/2023 00:00:09'!
m1: anAccumulator
	^anAccumulator +value.!
!Withdraw methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 00:00:45'!
computeOn: anAccumulator
	^anAccumulator - value.! !

!methodRemoval: Withdraw #m1: stamp: 'OA 10/19/2023 00:00:45'!
m1: anAccumulator
	^anAccumulator - value.!
!ReceptiveAccount methodsFor: 'balance' stamp: 'OA 10/19/2023 00:01:07' prior: 50656165!
balance
	^transactions inject: 0 into: [:sum :aTransaction | 		
								aTransaction computeOn: sum].! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/19/2023 00:01:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/19/2023 00:01:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/19/2023 00:01:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/19/2023 00:01:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/19/2023 00:01:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/19/2023 00:01:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/19/2023 00:01:09'!
PASSED!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 00:01:11'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 00:01:11'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 00:01:11'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 00:01:11'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'OA 10/19/2023 00:01:11'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'OA 10/19/2023 00:01:11'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'OA 10/19/2023 00:01:11'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'OA 10/19/2023 00:01:11'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'OA 10/19/2023 00:01:11'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 00:02:34'!
test05portfolioWithAccountsCheckTransaction
	|portfolio deposit account deposit2|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	deposit2 := Deposit register: 100 on: account.
	deposit := Deposit for: 200.
	
	self assert: (portfolio hasRegistered: deposit2).
	self deny: (portfolio hasRegistered: deposit).! !

!methodRemoval: PortfolioTest #test05 stamp: 'OA 10/19/2023 00:02:34'!
test05
	|portfolio deposit account deposit2|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	deposit2 := Deposit register: 100 on: account.
	deposit := Deposit for: 200.
	
	self assert: (portfolio hasRegistered: deposit2).
	self deny: (portfolio hasRegistered: deposit).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 00:02:53'!
test06portfolioWithAccountsAndPortfoliosCheckTransaction
	|portfolio portfolio2 deposit account account2 deposit2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 :=ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	deposit2 := Deposit register: 50 on: account2.
	deposit := Deposit for: 70.
	
	self assert: (portfolio hasRegistered: deposit2).
	self deny: (portfolio hasRegistered: deposit).! !

!methodRemoval: PortfolioTest #test06 stamp: 'OA 10/19/2023 00:02:53'!
test06
	|portfolio portfolio2 deposit account account2 deposit2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 :=ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	deposit2 := Deposit register: 50 on: account2.
	deposit := Deposit for: 70.
	
	self assert: (portfolio hasRegistered: deposit2).
	self deny: (portfolio hasRegistered: deposit).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 00:09:56'!
test07newPortfolioHasNoTransactions
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio transactions = (OrderedCollection new).! !

!methodRemoval: PortfolioTest #test07 stamp: 'OA 10/19/2023 00:09:56'!
test07
	|portfolio|
	portfolio := Portfolio new.
	
	self assert: portfolio transactions = (OrderedCollection new).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 00:21:02'!
test08portfolioWithAccountsTransactions
	|portfolio account transactions deposit withdraw|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactions := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions = (OrderedCollection with: transactions).! !

!methodRemoval: PortfolioTest #test08 stamp: 'OA 10/19/2023 00:21:02'!
test08
	|portfolio account transactions deposit withdraw|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactions := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions = (OrderedCollection with: transactions).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 00:21:26'!
test09portfolioWithAccountsAndPortfoliosTransactions
	|portfolio portfolio2 account account2 transactions deposit withdraw transactions2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactions := OrderedCollection with: deposit with: withdraw.
	deposit := Deposit register: 200 on: account2.
	withdraw := Withdraw register: 75 on: account2.
	transactions2 := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions = (OrderedCollection with: transactions
			with: (OrderedCollection with: transactions2)).! !

!methodRemoval: PortfolioTest #test09 stamp: 'OA 10/19/2023 00:21:26'!
test09
	|portfolio portfolio2 account account2 transactions deposit withdraw transactions2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio addAccount: account.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account2.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactions := OrderedCollection with: deposit with: withdraw.
	deposit := Deposit register: 200 on: account2.
	withdraw := Withdraw register: 75 on: account2.
	transactions2 := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions = (OrderedCollection with: transactions
			with: (OrderedCollection with: transactions2)).!
!AccountTransaction methodsFor: 'nil' stamp: 'OA 10/19/2023 00:22:37'!
computeOn: anAccumulator
	^self subclassResponsibility.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 00:34:02'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 00:34:02'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 00:34:02'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 00:34:02'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 00:34:02'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 00:34:02'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 00:34:02'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 00:34:02'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 00:34:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/19/2023 00:34:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/19/2023 00:34:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/19/2023 00:34:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/19/2023 00:34:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/19/2023 00:34:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/19/2023 00:34:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/19/2023 00:34:04'!
PASSED!

Object subclass: #PortfolioTree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTree category: 'Portfolio-Ejercicio' stamp: 'OA 10/19/2023 00:35:31'!
Object subclass: #PortfolioTree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioTree subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'OA 10/19/2023 00:36:29'!
PortfolioTree subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioTree subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'OA 10/19/2023 00:36:39'!
PortfolioTree subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #PortfolioTree
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTree category: 'Portfolio-Ejercicio' stamp: 'OA 10/19/2023 00:36:54'!
Object subclass: #PortfolioTree
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTree methodsFor: 'nil' stamp: 'OA 10/19/2023 00:37:22'!
balance
	^self subclassResponsibility.! !
!PortfolioTree methodsFor: 'nil' stamp: 'OA 10/19/2023 00:37:47'!
hasRegistered: aTransaction
	^self subclassResponsibility.! !
!PortfolioTree methodsFor: 'nil' stamp: 'OA 10/19/2023 00:38:01'!
transactions
	^self subclassResponsibility.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 00:51:30'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 00:51:30'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 00:51:30'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 00:51:30'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 00:51:30'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 00:51:30'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 00:51:30'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 00:51:30'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 00:51:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/19/2023 00:51:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/19/2023 00:51:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/19/2023 00:51:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/19/2023 00:51:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/19/2023 00:51:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/19/2023 00:51:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/19/2023 00:51:32'!
PASSED!

----QUIT----(19 October 2023 00:55:25) CuisUniversity-5981.image priorSource: 10369047!

----STARTUP---- (19 October 2023 12:54:00) as /home/oscar/Downloads/linux64/linux64/CuisUniversity-5981.image!

!PortfolioTest methodsFor: 'nil' stamp: 'OA 10/19/2023 13:07:29'!
test10
	|portfolio account|
	portfolio := PortfolioTree new.
	account := ReceptiveAccount new.
	portfolio addElement: account.
	self
		should: [portfolio addElement: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 PortfolioTree repeatedAccountErrorDescription ]! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 13:07:42'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 13:07:42'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 13:07:42'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 13:07:42'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 13:07:42'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 13:07:42'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 13:07:42'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 13:07:42'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 13:07:42'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 13:07:42'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 13:07:42'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/19/2023 13:07:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/19/2023 13:07:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'OA 10/19/2023 13:07:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'OA 10/19/2023 13:07:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'OA 10/19/2023 13:07:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'OA 10/19/2023 13:07:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'OA 10/19/2023 13:07:46'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 13:07:50'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 13:07:50'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 13:11:51' prior: 50656605!
test10
	|portfolio account|
	portfolio := PortfolioTree new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	self
		should: [portfolio addAccount: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 PortfolioTree repeatedAccountErrorDescription ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 13:14:32' prior: 50654091!
addAccount: anAccount
	(accounts includes: anAccount) ifTrue: 
					[self error: self class repeatedAccountErrorDescription].
	accounts addLast: anAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 13:15:32' prior: 50656701!
addAccount: anAccount
	(accounts includes: anAccount) ifTrue: 
					[self error: self repeatedAccountErrorDescription].
	accounts addLast: anAccount.! !
!PortfolioTree class methodsFor: 'nil' stamp: 'OA 10/19/2023 13:17:00'!
repeatedAccountErrorDescription
	^'The account is already part of the portfolio.'! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 13:17:05'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 13:17:05'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 13:17:05'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 13:17:05'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 13:17:05'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 13:17:05'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 13:17:05'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 13:17:05'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 13:17:05'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 13:17:05'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 13:17:05'!
ERROR!

!methodRemoval: PortfolioTree class #repeatedAccountErrorDescription stamp: 'OA 10/19/2023 13:17:56'!
repeatedAccountErrorDescription
	^'The account is already part of the portfolio.'!
!Portfolio class methodsFor: 'nil' stamp: 'OA 10/19/2023 13:18:18'!
repeatedAccountErrorDescription
	^'The account is already in the portfolio.'! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 13:18:38' prior: 50656687!
test10
	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	self
		should: [portfolio addAccount: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 Portfolio repeatedAccountErrorDescription ]! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 13:18:41'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 13:18:41'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 13:18:41'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 13:18:41'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 13:18:41'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 13:18:41'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 13:18:41'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 13:18:41'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 13:18:41'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 13:18:41'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 13:18:41'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 13:20:05' prior: 50656709!
addAccount: anAccount
	(accounts includes: anAccount) ifTrue: 
					[^self error: self class repeatedAccountErrorDescription].
	accounts addLast: anAccount.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 13:20:09'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 13:20:09'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 13:20:09'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 13:20:09'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 13:20:09'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 13:20:09'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 13:20:09'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 13:20:09'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 13:20:09'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 13:20:09'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 13:34:50'!
test11
	|portfolio portfolio2 account|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	self
		should: [portfolio addAccount: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 Portfolio repeatedAccountErrorDescription ]! !

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 13:34:53'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 13:34:55'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 13:34:55'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 13:38:50' prior: 50656822!
addAccount: anAccount
	(accounts includes: anAccount) ifTrue: 
					[^self error: self class repeatedAccountErrorDescription].
	(portfolios includesTheAccount: anAccount) ifTrue:
					[^self error: self class repeatedAcountErrorDescription].
	accounts addLast: anAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 13:39:01' prior: 50656888!
addAccount: anAccount
	(accounts includes: anAccount) ifTrue: 
					[^self error: self class repeatedAccountErrorDescription].
	(portfolios includesTheAccount: anAccount) ifTrue:
					[^self error: self class repeatedAccountErrorDescription].
	accounts addLast: anAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 13:46:21' prior: 50656900!
addAccount: anAccount
	(accounts includes: anAccount) ifTrue: 
					[^self error: self class repeatedAccountErrorDescription].
	(portfolios anySatisfy: [:portfolio | portfolio includesTheAccount: anAccount])
		ifTrue: [^self error: self class repeatedAccountErrorDescription].
	accounts addLast: anAccount.! !
!Portfolio methodsFor: 'nil' stamp: 'OA 10/19/2023 13:47:04'!
includesTheAccont: anAccount
	^accounts includes: anAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 13:47:11'!
includesTheAccount: anAccount
	^accounts includes: anAccount.! !

!methodRemoval: Portfolio #includesTheAccont: stamp: 'OA 10/19/2023 13:47:11'!
includesTheAccont: anAccount
	^accounts includes: anAccount.!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 13:47:21'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 13:47:21'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 13:47:21'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 13:47:21'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 13:47:21'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 13:47:21'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 13:47:21'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 13:47:21'!
PASSED!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 13:47:24'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 13:47:24'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 13:47:24'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 13:47:24'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 13:47:24'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 13:47:24'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 13:47:24'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 13:47:24'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 13:47:24'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 13:47:24'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 13:47:24'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 13:47:29'!
PASSED!
!Portfolio class methodsFor: 'nil' stamp: 'OA 10/19/2023 13:50:49'!
repeatedPortfolioErrorDescription
	^'The portfolio is already in the PortfolioTree.'! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 13:52:21'!
test12
	|portfolio  account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	self
		should: [portfolio addPortfolio: portfolio]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 Portfolio repeatedPortfolioErrorDescription ]! !

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 13:52:39'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 13:52:41'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 13:52:41'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 13:54:43' prior: 50654807!
addPortfolio: aPortfolio
	(aPortfolio = self) ifTrue: [self error:
							self class repeatedPortfolioErrorDescription].
	portfolios addLast: aPortfolio.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 13:54:45'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 13:54:45'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 13:54:45'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 13:54:45'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 13:54:45'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 13:54:45'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 13:54:45'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 13:54:45'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 13:54:45'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 13:54:45'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 13:54:45'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 13:54:45'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 14:02:54'!
test13
	|portfolio portfolio2  account|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addAccount: account.
	self
		should: [portfolio2 addAccount: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 Portfolio repeatedAccountErrorDescription ]! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 14:03:39'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 14:03:39'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 14:03:39'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 14:03:39'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 14:03:39'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 14:03:39'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 14:03:39'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 14:03:39'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 14:03:39'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 14:03:39'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 14:03:39'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 14:03:39'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 14:03:39'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 14:03:39'!
FAILURE!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 14:08:01'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 14:08:01'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 14:08:01'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 14:08:01'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 14:08:01'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 14:08:01'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 14:08:01'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 14:08:01'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 14:08:01'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 14:08:01'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 14:08:01'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 14:08:01'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 14:08:01'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 14:08:01'!
FAILURE!

----QUIT----(19 October 2023 14:09:12) CuisUniversity-5981.image priorSource: 10398346!

----STARTUP---- (19 October 2023 14:43:51) as /home/oscar/Downloads/linux64/linux64/CuisUniversity-5981.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 14:48:52' prior: 50657079!
test13
	|portfolio portfolio2  account|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	portfolio addPortfolio: portfolio2.
	portfolio addAccount: account.
	self
		should: [portfolio2 addAccount: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 Portfolio repeatedAccountErrorDescription ]! !

Object subclass: #PortfolioTree
	instanceVariableNames: 'parentNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTree category: 'Portfolio-Ejercicio' stamp: 'OA 10/19/2023 14:57:36'!
Object subclass: #PortfolioTree
	instanceVariableNames: 'parentNode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 14:59:02'!
add: aNewChildrenNode! !

PortfolioTree subclass: #Portfolio
	instanceVariableNames: 'childrenNodes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'OA 10/19/2023 14:59:46'!
PortfolioTree subclass: #Portfolio
	instanceVariableNames: 'childrenNodes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:00:22' prior: 50654040 overrides: 16920235!
initialize
	childrenNodes := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:02:18' prior: 50657217!
add: aNewChildrenNode

	childrenNodes addLast: aNewChildrenNode.
	
	aNewChildrenNode addParent: self.! !
!PortfolioTree methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:02:51'!
addParent: aParentNode
	parentNode := aParentNode.! !
!PortfolioTree methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:03:35' overrides: 16920235!
initialize
	parentNode := OrderedCollection new.! !
!PortfolioTree methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:03:51' prior: 50657246!
addParent: aParentNode
	parentNode addLast: aParentNode.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:04:05' prior: 50657240!
add: aNewChildrenNode

	childrenNodes addLast: aNewChildrenNode.
	aNewChildrenNode addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:06:06' prior: 50656127 overrides: 50656528!
balance
	|balance|
	
	balance := childrenNodes inject:0 into: [:sum :child | sum + child balance].
	
	^balance.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:08:41' prior: 50655485 overrides: 50656532!
hasRegistered: aTransaction
	|found|
	found := childrenNodes anySatisfy: [:child | child hasRegistered: aTransaction].
	^found
! !

!methodRemoval: Portfolio #includesTheAccount: stamp: 'OA 10/19/2023 15:09:06'!
includesTheAccount: anAccount
	^accounts includes: anAccount.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:10:31' prior: 50655769 overrides: 50656536!
transactions
	|transactions|
	transactions := OrderedCollection new.
	
	childrenNodes do: [:child | transactions addLast: (child transactions)].
	^transactions! !

!methodRemoval: Portfolio #addPortfolio: stamp: 'OA 10/19/2023 15:11:07'!
addPortfolio: aPortfolio
	(aPortfolio = self) ifTrue: [self error:
							self class repeatedPortfolioErrorDescription].
	portfolios addLast: aPortfolio.!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:11:35'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:11:35'!
ERROR!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:11:35'!
ERROR!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 15:11:35'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 15:11:35'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:11:35'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 15:11:35'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:11:35'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 15:11:35'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:11:35'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:11:35'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 15:11:35'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:11:35'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:11:56' prior: 50655105!
test02portfolioBalanceIsTheSumOfEachAccountBalance
	|portfolio account account2|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account.
	portfolio add: account2.
	Deposit register: 200 on: account2.
	Withdraw register: 100 on: account2.
	Deposit register: 100 on: account .
	Withdraw register: 50 on: account.
	self assert: portfolio balance = 150.! !

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:11:56'!
ERROR!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:12:26'!
ERROR!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:12:26'!
ERROR!
!PortfolioTree methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:13:16' prior: 50657256!
addParent: aParentNode

	parentNode addLast: aParentNode.! !
!PortfolioTree methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:13:36'!
add: sdad
	self subclassResponsibility ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'OA 10/19/2023 15:13:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/19/2023 15:13:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'OA 10/19/2023 15:13:58'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:14:12'!
ERROR!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:14:12'!
ERROR!
!PortfolioTree methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:15:04' prior: 50657374!
addParent: aParentNode

	parentNode := aParentNode.! !
!PortfolioTree methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:15:18' prior: 50657251 overrides: 16920235!
initialize
! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:15:25'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:15:27'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:15:28'!
ERROR!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:15:28'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:15:47' prior: 50655136!
test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances
	|portfolio account account2 portfolio2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account.
	portfolio add: portfolio2.
	portfolio2 add: account2.
	Deposit register: 200 on: account2.
	Withdraw register: 100 on: account2.
	Deposit register: 100 on: account .
	Withdraw register: 50 on: account.
	self assert: portfolio balance = 150.! !

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:15:48'!
PASSED!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:15:48'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:15:48'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:15:48'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 15:15:48'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 15:15:48'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:15:48'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 15:15:48'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:15:48'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 15:15:48'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:15:48'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:15:48'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 15:15:48'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:15:48'!
ERROR!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:15:53'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 15:15:56'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:16:03' prior: 50656246!
test05portfolioWithAccountsCheckTransaction
	|portfolio deposit account deposit2|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	deposit2 := Deposit register: 100 on: account.
	deposit := Deposit for: 200.
	
	self assert: (portfolio hasRegistered: deposit2).
	self deny: (portfolio hasRegistered: deposit).! !

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 15:16:04'!
PASSED!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:16:04'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:16:04'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:16:04'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 15:16:04'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 15:16:04'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:16:04'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 15:16:04'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:16:04'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 15:16:04'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:16:04'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:16:04'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 15:16:04'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:16:04'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:16:13'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:16:13'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:16:31' prior: 50656273!
test06portfolioWithAccountsAndPortfoliosCheckTransaction
	|portfolio portfolio2 deposit account account2 deposit2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 :=ReceptiveAccount new.
	portfolio add: account.
	portfolio add: portfolio2.
	portfolio2 add: account2.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	deposit2 := Deposit register: 50 on: account2.
	deposit := Deposit for: 70.
	
	self assert: (portfolio hasRegistered: deposit2).
	self deny: (portfolio hasRegistered: deposit).! !

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:16:32'!
PASSED!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:16:32'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:16:32'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:16:32'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 15:16:32'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 15:16:32'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:16:32'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 15:16:32'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:16:32'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 15:16:32'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:16:32'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:16:32'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 15:16:32'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:16:32'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 15:16:38'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:16:56'!
ERROR!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:16:56'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:17:05' prior: 50656328!
test08portfolioWithAccountsTransactions
	|portfolio account transactions deposit withdraw|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactions := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions = (OrderedCollection with: transactions).! !

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:17:06'!
PASSED!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:17:06'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:17:06'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:17:06'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 15:17:06'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 15:17:06'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:17:06'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 15:17:06'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:17:06'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 15:17:06'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:17:06'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:17:06'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 15:17:06'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:17:06'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:17:21' prior: 50656359!
test09portfolioWithAccountsAndPortfoliosTransactions
	|portfolio portfolio2 account account2 transactions deposit withdraw transactions2|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio add: account.
	portfolio add: portfolio2.
	portfolio2 add: account2.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	transactions := OrderedCollection with: deposit with: withdraw.
	deposit := Deposit register: 200 on: account2.
	withdraw := Withdraw register: 75 on: account2.
	transactions2 := OrderedCollection with: deposit with: withdraw.
	
	self assert: portfolio transactions = (OrderedCollection with: transactions
			with: (OrderedCollection with: transactions2)).! !

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 15:17:22'!
PASSED!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:17:22'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:17:22'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:17:22'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 15:17:22'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 15:17:22'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:17:22'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 15:17:22'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:17:22'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 15:17:22'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:17:22'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:17:22'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 15:17:22'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:17:22'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:17:37'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:17:48' prior: 50656771!
test10
	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	self
		should: [portfolio add: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 Portfolio repeatedAccountErrorDescription ]! !

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:17:49'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:19:04' prior: 50657261 overrides: 50657379!
add: aNewChildrenNode
	
	childrenNodes addLast: aNewChildrenNode.
	aNewChildrenNode addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:20:55' prior: 50657798 overrides: 50657379!
add: aNewChildrenNode
	(childrenNodes includes: aNewChildrenNode ) ifTrue: [].
	childrenNodes addLast: aNewChildrenNode.
	aNewChildrenNode addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:22:30' prior: 50657805 overrides: 50657379!
add: aNewChildrenNode
	(childrenNodes includes: aNewChildrenNode ) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	aNewChildrenNode addParent: self.! !
!PortfolioTree class methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:22:56'!
repeatedAccountErrorDescription
	^'The account is already in the portfolio.'! !

!methodRemoval: Portfolio class #repeatedAccountErrorDescription stamp: 'OA 10/19/2023 15:22:56'!
repeatedAccountErrorDescription
	^'The account is already in the portfolio.'!
!PortfolioTree class methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:23:04'!
repeatedPortfolioErrorDescription
	^'The portfolio is already in the PortfolioTree.'! !

!methodRemoval: Portfolio class #repeatedPortfolioErrorDescription stamp: 'OA 10/19/2023 15:23:04'!
repeatedPortfolioErrorDescription
	^'The portfolio is already in the PortfolioTree.'!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:23:19'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:23:21'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:23:21'!
ERROR!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:23:52'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:23:52'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:23:52'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 15:23:52'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 15:23:52'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:23:52'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 15:23:52'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:23:52'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 15:23:52'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:23:52'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:23:52'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 15:23:52'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:23:52'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:24:04' prior: 50656865!
test11
	|portfolio portfolio2 account|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: portfolio2.
	portfolio2 add: account.
	self
		should: [portfolio add: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 Portfolio repeatedAccountErrorDescription ]! !

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:24:06'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:24:06'!
FAILURE!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:24:13'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:24:13'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:24:13'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 15:24:13'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 15:24:13'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:24:13'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 15:24:13'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:24:13'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 15:24:13'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:24:13'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:24:13'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 15:24:13'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:24:13'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:24:39' prior: 50657896!
test11
	|portfolio portfolio2 account|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: portfolio2.
	portfolio2 add: account.
	self
		should: [portfolio add: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 PortfolioTree repeatedAccountErrorDescription ]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:24:46' prior: 50657782!
test10
	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	self
		should: [portfolio add: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 PortfolioTree repeatedAccountErrorDescription ]! !

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:24:48'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:24:48'!
FAILURE!
!Portfolio methodsFor: 'nil' stamp: 'OA 10/19/2023 15:27:02'!
includesInChildren: anAccount
	^(childrenNodes includes: anAccount)! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:27:43' prior: 50657814 overrides: 50657379!
add: aNewChildrenNode
	(self includesInChildren: aNewChildrenNode) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	aNewChildrenNode addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:27:53' prior: 50657991!
includesInChildren: anAccount

	^(childrenNodes includes: anAccount)! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:29:54' prior: 50657997 overrides: 50657379!
add: aNewChildrenNode
	(aNewChildrenNode isIncludedIn: childrenNodes) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	aNewChildrenNode addParent: self.! !
!Portfolio methodsFor: 'nil' stamp: 'OA 10/19/2023 15:30:30'!
isIncludedIn: aNode
	^aNode includes: self.! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'OA 10/19/2023 15:30:46'!
isIncludedIn: aNode
	^aNode includes: self.! !

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:31:02'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:31:05'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:31:05'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:31:55' prior: 50658022!
isIncludedIn: aNode
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:33:20' prior: 50658038!
isIncludedIn: aNode
	self includedIn: aNode.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:37:25' prior: 50658042!
isIncludedIn: aNode
	(childrenNodes includes: aNode) or: [childrenNodes do: [:child | (child isKindOf: Portfolio) ifTrue: [child isIncludedIn: aNode]]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:37:46' prior: 50658013 overrides: 50657379!
add: aNewChildrenNode
	(childrenNodes isIncludedIn: aNewChildrenNode ) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	aNewChildrenNode addParent: self.! !

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:37:55'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:37:55'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:38:47' prior: 50658047!
isIncludedIn: aNode
	(childrenNodes includes: aNode) or: [childrenNodes do: [:child | (child isKindOf: Portfolio) ifTrue: [^child isIncludedIn: aNode]]].! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:39:07'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:39:07'!
ERROR!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:39:07'!
ERROR!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 15:39:07'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 15:39:07'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:39:07'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 15:39:07'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:39:07'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 15:39:07'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:39:07'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:39:07'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 15:39:07'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:39:07'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:39:27' prior: 50658071!
isIncludedIn: aNode
	(childrenNodes includes: aNode) or: [childrenNodes do: [:child | (child isKindOf: Portfolio) ifTrue: [child isIncludedIn: aNode]]].! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:39:30'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:39:30'!
ERROR!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:39:30'!
ERROR!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 15:39:30'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 15:39:30'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:39:30'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 15:39:30'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:39:30'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 15:39:30'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:39:30'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:39:30'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 15:39:30'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:39:30'!
ERROR!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:39:43'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:39:45'!
ERROR!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:39:45'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:29:54' prior: 50658056 overrides: 50657379!
add: aNewChildrenNode
	(aNewChildrenNode isIncludedIn: childrenNodes) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	aNewChildrenNode addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:40:54' prior: 50658182 overrides: 50657379!
add: aNewChildrenNode
	(childrenNodes includes: aNewChildrenNode) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	aNewChildrenNode addParent: self.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:40:59'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:40:59'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:40:59'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 15:40:59'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 15:40:59'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:40:59'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 15:40:59'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:40:59'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 15:40:59'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:40:59'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:40:59'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 15:40:59'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:40:59'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:43:14' prior: 50658193 overrides: 50657379!
add: aNewChildrenNode
	(self getAllDescendants includes: aNewChildrenNode ) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	aNewChildrenNode addParent: self.! !

!methodRemoval: Portfolio #isIncludedIn: stamp: 'OA 10/19/2023 15:43:25'!
isIncludedIn: aNode
	(childrenNodes includes: aNode) or: [childrenNodes do: [:child | (child isKindOf: Portfolio) ifTrue: [child isIncludedIn: aNode]]].!

!methodRemoval: Portfolio #includesInChildren: stamp: 'OA 10/19/2023 15:43:27'!
includesInChildren: anAccount

	^(childrenNodes includes: anAccount)!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:46:46'!
getAllDescendants
	|descendants|
	descendants := OrderedCollection new.
	childrenNodes inject: descendants into: [:accum :node | 
					accum union: (node getDescendants)].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:48:21' prior: 50658268!
getAllDescendants
	|descendants|
	descendants := OrderedCollection new.
	childrenNodes do: [:child | descendants addLast: (child getDescendants)].
	^descendants! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'OA 10/19/2023 15:48:37'!
getDescendants
	^self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:49:30'!
getDescendants
	^self getAllDescendants .! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:49:52'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:49:52'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 15:49:52'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:49:52'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:49:58'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:49:58'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:55:22' prior: 50658277!
getAllDescendants
	|descendants|
	descendants := Set new.
	childrenNodes do: [:child | (child isKindOf: Portfolio) ifTrue: [descendants addAll: child getAllDescendants] ifFalse: [descendants add: child]].
	
	^(descendants asOrderedCollection).! !

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:55:31'!
PASSED!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:56:47'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:56:47'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:56:47'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 15:56:47'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 15:56:47'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:56:47'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 15:56:47'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:56:47'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 15:56:47'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:56:47'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:56:47'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 15:56:47'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:56:47'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:57:05' prior: 50657011!
test12
	|portfolio  account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	self
		should: [portfolio add: portfolio]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 Portfolio repeatedPortfolioErrorDescription ]! !

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 15:57:07'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:58:19' prior: 50658246 overrides: 50657379!
add: aNewChildrenNode
	(aNewChildrenNode =self ) ifTrue:
			 [self error: PortfolioTree repeatedPortfolioErrorDescription].
	(self getAllDescendants includes: aNewChildrenNode ) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	aNewChildrenNode addParent: self.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:58:23'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:58:23'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:58:23'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 15:58:23'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 15:58:23'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:58:23'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 15:58:23'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:58:23'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 15:58:23'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:58:23'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:58:23'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 15:58:23'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:58:23'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:58:23'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 15:58:39' prior: 50657189!
test13
	|portfolio portfolio2  account|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: portfolio2.
	portfolio addAccount: account.
	self
		should: [portfolio2 add: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 Portfolio repeatedAccountErrorDescription ]! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 15:58:41'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:58:41'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 15:58:41'!
ERROR!

!methodRemoval: Portfolio #getDescendants stamp: 'OA 10/19/2023 15:59:07'!
getDescendants
	^self getAllDescendants .!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:00:44' prior: 50658411 overrides: 50657379!
add: aNewChildrenNode
	(parentNode getAllDescendants includes: aNewChildrenNode ) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription ].
	(aNewChildrenNode =self ) ifTrue:
			 [self error: PortfolioTree repeatedPortfolioErrorDescription].
	(self getAllDescendants includes: aNewChildrenNode ) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	aNewChildrenNode addParent: self.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 16:00:48'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 16:00:48'!
ERROR!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 16:00:48'!
ERROR!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 16:00:48'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 16:00:48'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 16:00:48'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 16:00:48'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 16:00:48'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 16:00:48'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 16:00:48'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 16:00:48'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 16:00:48'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 16:00:48'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:01:37' prior: 50658533 overrides: 50657379!
add: aNewChildrenNode
	(parentNode includes: aNewChildrenNode ) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription ].
	(aNewChildrenNode =self ) ifTrue:
			 [self error: PortfolioTree repeatedPortfolioErrorDescription].
	(self getAllDescendants includes: aNewChildrenNode ) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	aNewChildrenNode addParent: self.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 16:01:39'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 16:01:39'!
ERROR!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 16:01:39'!
ERROR!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 16:01:39'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 16:01:39'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 16:01:39'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 16:01:39'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 16:01:39'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 16:01:39'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 16:01:39'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 16:01:39'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 16:01:39'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 16:01:39'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:03:54' prior: 50658593 overrides: 50657379!
add: aNewChildrenNode
	(aNewChildrenNode includedIn: parentNode) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription ].
	(aNewChildrenNode =self ) ifTrue:
			 [self error: PortfolioTree repeatedPortfolioErrorDescription].
	(self getAllDescendants includes: aNewChildrenNode ) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	aNewChildrenNode addParent: self.! !
!PortfolioTree methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:04:18' prior: 50657403!
addParent: aParentNode

	parentNode add: aParentNode.! !
!PortfolioTree methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:04:56' prior: 50657409 overrides: 16920235!
initialize
	parentNode := OrderedCollection new.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 16:04:59'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 16:04:59'!
ERROR!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 16:04:59'!
ERROR!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 16:04:59'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 16:04:59'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 16:04:59'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 16:04:59'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 16:04:59'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 16:04:59'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 16:04:59'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 16:04:59'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 16:04:59'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 16:04:59'!
ERROR!
!PortfolioTree methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:05:28' prior: 50658670!
addParent: aParentNode

	parentNode := aParentNode.! !
!PortfolioTree methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:05:33' prior: 50658676 overrides: 16920235!
initialize
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:08:21' prior: 50658652 overrides: 50657379!
add: aNewChildrenNode
	(parentNode includesANode: aNewChildrenNode) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription ].
	(aNewChildrenNode =self ) ifTrue:
			 [self error: PortfolioTree repeatedPortfolioErrorDescription].
	(self getAllDescendants includes: aNewChildrenNode ) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	aNewChildrenNode addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:08:51'!
includesANode: aNode
	^childrenNodes includes: aNode.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 16:08:56'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 16:08:56'!
ERROR!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 16:08:56'!
ERROR!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 16:08:56'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 16:08:56'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 16:08:56'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 16:08:56'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 16:08:56'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 16:08:56'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 16:08:56'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 16:08:56'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 16:08:56'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 16:08:56'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:09:17' prior: 50658734 overrides: 50657379!
add: aNewChildrenNode
	"(parentNode includesANode: aNewChildrenNode) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription ]."
	(aNewChildrenNode =self ) ifTrue:
			 [self error: PortfolioTree repeatedPortfolioErrorDescription].
	(self getAllDescendants includes: aNewChildrenNode ) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	aNewChildrenNode addParent: self.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 16:09:19'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 16:09:19'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 16:09:19'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 16:09:19'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 16:09:19'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 16:09:19'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 16:09:19'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 16:09:19'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 16:09:19'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'OA 10/19/2023 16:09:19'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'OA 10/19/2023 16:09:19'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'OA 10/19/2023 16:09:19'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 16:09:19'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 16:09:19'!
ERROR!

!methodRemoval: Portfolio #addAccount: stamp: 'OA 10/19/2023 16:11:06'!
addAccount: anAccount
	(accounts includes: anAccount) ifTrue: 
					[^self error: self class repeatedAccountErrorDescription].
	(portfolios anySatisfy: [:portfolio | portfolio includesTheAccount: anAccount])
		ifTrue: [^self error: self class repeatedAccountErrorDescription].
	accounts addLast: anAccount.!
!PortfolioTree methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:11:40' prior: 50657379!
add: aTreeNode
	self subclassResponsibility ! !

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 16:15:22'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:16:30'!
test10cannotAddRepeatedAccount
	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	self
		should: [portfolio add: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 PortfolioTree repeatedAccountErrorDescription ]! !

!methodRemoval: PortfolioTest #test10 stamp: 'OA 10/19/2023 16:16:30'!
test10
	|portfolio account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	self
		should: [portfolio add: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 PortfolioTree repeatedAccountErrorDescription ]!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:19:27'!
test11cannotAddAccountAlreadyInChildren
	|portfolio portfolio2 account|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: portfolio2.
	portfolio2 add: account.
	self
		should: [portfolio add: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 PortfolioTree repeatedAccountErrorDescription ]! !

!methodRemoval: PortfolioTest #test11 stamp: 'OA 10/19/2023 16:19:27'!
test11
	|portfolio portfolio2 account|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: portfolio2.
	portfolio2 add: account.
	self
		should: [portfolio add: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 PortfolioTree repeatedAccountErrorDescription ]!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:20:44'!
test12cannotAddTheSamePortfolio
	|portfolio  account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	self
		should: [portfolio add: portfolio]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 Portfolio repeatedPortfolioErrorDescription ]! !

!methodRemoval: PortfolioTest #test12 stamp: 'OA 10/19/2023 16:20:44'!
test12
	|portfolio  account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	self
		should: [portfolio add: portfolio]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 Portfolio repeatedPortfolioErrorDescription ]!
!PortfolioTree methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:21:46' prior: 50658729 overrides: 16920235!
initialize
! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'OA 10/19/2023 16:22:31'!
PortfolioTree subclass: #Portfolio
	instanceVariableNames: 'childrenNodes parentCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:22:30' prior: 50658798 overrides: 50658872!
add: aNewChildrenNode
	"(parentNode includesANode: aNewChildrenNode) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription ]."
	(aNewChildrenNode =self ) ifTrue:
			 [self error: PortfolioTree repeatedPortfolioErrorDescription].
	(self getAllDescendants includes: aNewChildrenNode ) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	
	parentCollection := OrderedCollection new.
	parentCollection add: self.
	aNewChildrenNode addParent: parentCollection.! !

PortfolioTree subclass: #Portfolio
	instanceVariableNames: 'childrenNodes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'OA 10/19/2023 16:22:43'!
PortfolioTree subclass: #Portfolio
	instanceVariableNames: 'childrenNodes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:23:04' prior: 50658976 overrides: 50658872!
add: aNewChildrenNode

 	|parentCollection|
	"(parentNode includesANode: aNewChildrenNode) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription ]."
	(aNewChildrenNode =self ) ifTrue:
			 [self error: PortfolioTree repeatedPortfolioErrorDescription].
	(self getAllDescendants includes: aNewChildrenNode ) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	
	parentCollection := OrderedCollection new.
	parentCollection add: self.
	aNewChildrenNode addParent: parentCollection.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 16:23:28'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 16:23:28'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 16:23:28'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 16:23:28'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 16:23:28'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 16:23:28'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 16:23:28'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 16:23:28'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 16:23:28'!
PASSED!

!testRun: #PortfolioTest #test10cannotAddRepeatedAccount stamp: 'OA 10/19/2023 16:23:28'!
PASSED!

!testRun: #PortfolioTest #test11cannotAddAccountAlreadyInChildren stamp: 'OA 10/19/2023 16:23:28'!
PASSED!

!testRun: #PortfolioTest #test12cannotAddTheSamePortfolio stamp: 'OA 10/19/2023 16:23:28'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 16:23:28'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 16:23:28'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:23:44' prior: 50658469!
test13
	|portfolio portfolio2  account|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: portfolio2.
	portfolio add: account.
	self
		should: [portfolio2 add: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 Portfolio repeatedAccountErrorDescription ]! !

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 16:23:46'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:26:01' prior: 50659010 overrides: 50658872!
add: aNewChildrenNode

 	|parentCollection|
	(parentNode includesANode: aNewChildrenNode) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription ].
	(aNewChildrenNode =self ) ifTrue:
			 [self error: PortfolioTree repeatedPortfolioErrorDescription].
	(self getAllDescendants includes: aNewChildrenNode ) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	
	parentCollection := OrderedCollection new.
	parentCollection add: self.
	aNewChildrenNode addParent: parentCollection.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 16:26:23'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 16:26:23'!
ERROR!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 16:26:23'!
ERROR!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 16:26:23'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 16:26:23'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 16:26:23'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 16:26:23'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 16:26:23'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 16:26:23'!
ERROR!

!testRun: #PortfolioTest #test10cannotAddRepeatedAccount stamp: 'OA 10/19/2023 16:26:23'!
ERROR!

!testRun: #PortfolioTest #test11cannotAddAccountAlreadyInChildren stamp: 'OA 10/19/2023 16:26:23'!
ERROR!

!testRun: #PortfolioTest #test12cannotAddTheSamePortfolio stamp: 'OA 10/19/2023 16:26:23'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 16:26:23'!
ERROR!
!PortfolioTree methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:27:04' prior: 50658872!
add: aTreeNode
	^self subclassResponsibility ! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 16:27:22'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 16:27:22'!
ERROR!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 16:27:22'!
ERROR!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 16:27:22'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 16:27:22'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 16:27:22'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 16:27:22'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 16:27:22'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 16:27:22'!
ERROR!

!testRun: #PortfolioTest #test10cannotAddRepeatedAccount stamp: 'OA 10/19/2023 16:27:22'!
ERROR!

!testRun: #PortfolioTest #test11cannotAddAccountAlreadyInChildren stamp: 'OA 10/19/2023 16:27:22'!
ERROR!

!testRun: #PortfolioTest #test12cannotAddTheSamePortfolio stamp: 'OA 10/19/2023 16:27:22'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 16:27:22'!
ERROR!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 16:30:08'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 16:30:08'!
ERROR!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 16:30:08'!
ERROR!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 16:30:08'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 16:30:08'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 16:30:08'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 16:30:08'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 16:30:08'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 16:30:08'!
ERROR!

!testRun: #PortfolioTest #test10cannotAddRepeatedAccount stamp: 'OA 10/19/2023 16:30:08'!
ERROR!

!testRun: #PortfolioTest #test11cannotAddAccountAlreadyInChildren stamp: 'OA 10/19/2023 16:30:08'!
ERROR!

!testRun: #PortfolioTest #test12cannotAddTheSamePortfolio stamp: 'OA 10/19/2023 16:30:08'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 16:30:08'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:31:15' prior: 50657235 overrides: 50658963!
initialize
	super initialize.
	childrenNodes := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'OA 10/19/2023 16:31:40' prior: 50650799 overrides: 50658963!
initialize
	super initialize.
	transactions := OrderedCollection new.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 16:31:44'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 16:31:44'!
ERROR!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 16:31:44'!
ERROR!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 16:31:44'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 16:31:44'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 16:31:44'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 16:31:44'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 16:31:44'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 16:31:44'!
ERROR!

!testRun: #PortfolioTest #test10cannotAddRepeatedAccount stamp: 'OA 10/19/2023 16:31:44'!
ERROR!

!testRun: #PortfolioTest #test11cannotAddAccountAlreadyInChildren stamp: 'OA 10/19/2023 16:31:44'!
ERROR!

!testRun: #PortfolioTest #test12cannotAddTheSamePortfolio stamp: 'OA 10/19/2023 16:31:44'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 16:31:44'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:32:49' prior: 50659097 overrides: 50659162!
add: aNewChildrenNode

 	|parentCollection|
	(parentNode includesANode: aNewChildrenNode) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription ].
	(aNewChildrenNode =self ) ifTrue:
			 [self error: PortfolioTree repeatedPortfolioErrorDescription].
	(self getAllDescendants includes: aNewChildrenNode ) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	
	parentCollection := OrderedCollection new.
	parentCollection addLast: self.
	aNewChildrenNode addParent: parentCollection.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 16:32:51'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 16:32:51'!
ERROR!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 16:32:51'!
ERROR!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 16:32:51'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 16:32:51'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 16:32:51'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 16:32:51'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 16:32:51'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 16:32:51'!
ERROR!

!testRun: #PortfolioTest #test10cannotAddRepeatedAccount stamp: 'OA 10/19/2023 16:32:51'!
ERROR!

!testRun: #PortfolioTest #test11cannotAddAccountAlreadyInChildren stamp: 'OA 10/19/2023 16:32:51'!
ERROR!

!testRun: #PortfolioTest #test12cannotAddTheSamePortfolio stamp: 'OA 10/19/2023 16:32:51'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'OA 10/19/2023 16:32:51'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'OA 10/19/2023 16:33:40' prior: 50659262 overrides: 50658963!
initialize

	transactions := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:33:47' prior: 50659256 overrides: 50658963!
initialize

	childrenNodes := OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:34:42'!
test13cannotAddAccountAlreadyInParentsChildren
	|portfolio portfolio2  account|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: portfolio2.
	portfolio add: account.
	self
		should: [portfolio2 add: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 Portfolio repeatedAccountErrorDescription ]! !

!methodRemoval: PortfolioTest #test13 stamp: 'OA 10/19/2023 16:34:42'!
test13
	|portfolio portfolio2  account|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: portfolio2.
	portfolio add: account.
	self
		should: [portfolio2 add: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 Portfolio repeatedAccountErrorDescription ]!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:35:12' prior: 50658936!
test12cannotAddTheSamePortfolio
	|portfolio  account|
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	self
		should: [portfolio add: portfolio]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 PortfolioTree repeatedPortfolioErrorDescription ]! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:35:20' prior: 50659389!
test13cannotAddAccountAlreadyInParentsChildren
	|portfolio portfolio2  account|
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: portfolio2.
	portfolio add: account.
	self
		should: [portfolio2 add: account]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText =
				 PortfolioTree repeatedAccountErrorDescription ]! !

!testRun: #PortfolioTest #test13cannotAddAccountAlreadyInParentsChildren stamp: 'OA 10/19/2023 16:35:22'!
ERROR!

!testRun: #PortfolioTest #test13cannotAddAccountAlreadyInParentsChildren stamp: 'OA 10/19/2023 16:35:22'!
ERROR!

!testRun: #PortfolioTest #test13cannotAddAccountAlreadyInParentsChildren stamp: 'OA 10/19/2023 16:38:34'!
ERROR!

!testRun: #PortfolioTest #test13cannotAddAccountAlreadyInParentsChildren stamp: 'OA 10/19/2023 16:38:34'!
ERROR!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 16:40:29'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 16:40:29'!
ERROR!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 16:40:29'!
ERROR!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 16:40:29'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 16:40:29'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 16:40:29'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 16:40:29'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 16:40:29'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 16:40:29'!
ERROR!

!testRun: #PortfolioTest #test10cannotAddRepeatedAccount stamp: 'OA 10/19/2023 16:40:29'!
ERROR!

!testRun: #PortfolioTest #test11cannotAddAccountAlreadyInChildren stamp: 'OA 10/19/2023 16:40:29'!
ERROR!

!testRun: #PortfolioTest #test12cannotAddTheSamePortfolio stamp: 'OA 10/19/2023 16:40:29'!
ERROR!

!testRun: #PortfolioTest #test13cannotAddAccountAlreadyInParentsChildren stamp: 'OA 10/19/2023 16:40:29'!
ERROR!

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 16:44:45'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 16:44:45'!
ERROR!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 16:44:45'!
ERROR!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 16:44:45'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 16:44:45'!
ERROR!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 16:44:45'!
ERROR!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 16:44:45'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 16:44:45'!
ERROR!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 16:44:45'!
ERROR!

!testRun: #PortfolioTest #test10cannotAddRepeatedAccount stamp: 'OA 10/19/2023 16:44:45'!
ERROR!

!testRun: #PortfolioTest #test11cannotAddAccountAlreadyInChildren stamp: 'OA 10/19/2023 16:44:45'!
ERROR!

!testRun: #PortfolioTest #test12cannotAddTheSamePortfolio stamp: 'OA 10/19/2023 16:44:45'!
ERROR!

!testRun: #PortfolioTest #test13cannotAddAccountAlreadyInParentsChildren stamp: 'OA 10/19/2023 16:44:45'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'OA 10/19/2023 16:45:01' prior: 50659312 overrides: 50659162!
add: aNewChildrenNode

 	|parentCollection|
	"(parentNode includesANode: aNewChildrenNode) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription ]."
	(aNewChildrenNode =self ) ifTrue:
			 [self error: PortfolioTree repeatedPortfolioErrorDescription].
	(self getAllDescendants includes: aNewChildrenNode ) ifTrue:
			 [self error: PortfolioTree repeatedAccountErrorDescription].
	childrenNodes addLast: aNewChildrenNode.
	
	parentCollection := OrderedCollection new.
	parentCollection addLast: self.
	aNewChildrenNode addParent: parentCollection.! !

!testRun: #PortfolioTest #test01newPortfolioHasZeroBalance stamp: 'OA 10/19/2023 16:45:48'!
PASSED!

!testRun: #PortfolioTest #test02portfolioBalanceIsTheSumOfEachAccountBalance stamp: 'OA 10/19/2023 16:45:48'!
PASSED!

!testRun: #PortfolioTest #test03portfolioBalanceIsTheSumOfAccountsAndPortfoliosBalances stamp: 'OA 10/19/2023 16:45:48'!
PASSED!

!testRun: #PortfolioTest #test04newPortfolioWithoutRegisteredTransactions stamp: 'OA 10/19/2023 16:45:48'!
PASSED!

!testRun: #PortfolioTest #test05portfolioWithAccountsCheckTransaction stamp: 'OA 10/19/2023 16:45:48'!
PASSED!

!testRun: #PortfolioTest #test06portfolioWithAccountsAndPortfoliosCheckTransaction stamp: 'OA 10/19/2023 16:45:48'!
PASSED!

!testRun: #PortfolioTest #test07newPortfolioHasNoTransactions stamp: 'OA 10/19/2023 16:45:48'!
PASSED!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 16:45:48'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 16:45:48'!
PASSED!

!testRun: #PortfolioTest #test10cannotAddRepeatedAccount stamp: 'OA 10/19/2023 16:45:48'!
PASSED!

!testRun: #PortfolioTest #test11cannotAddAccountAlreadyInChildren stamp: 'OA 10/19/2023 16:45:48'!
PASSED!

!testRun: #PortfolioTest #test12cannotAddTheSamePortfolio stamp: 'OA 10/19/2023 16:45:48'!
PASSED!

!testRun: #PortfolioTest #test13cannotAddAccountAlreadyInParentsChildren stamp: 'OA 10/19/2023 16:45:48'!
FAILURE!

!testRun: #PortfolioTest #test13cannotAddAccountAlreadyInParentsChildren stamp: 'OA 10/19/2023 16:45:48'!
FAILURE!

!testRun: #PortfolioTest #test08portfolioWithAccountsTransactions stamp: 'OA 10/19/2023 16:45:55'!
PASSED!

!testRun: #PortfolioTest #test09portfolioWithAccountsAndPortfoliosTransactions stamp: 'OA 10/19/2023 16:45:57'!
PASSED!

!testRun: #PortfolioTest #test10cannotAddRepeatedAccount stamp: 'OA 10/19/2023 16:45:58'!
PASSED!

!testRun: #PortfolioTest #test12cannotAddTheSamePortfolio stamp: 'OA 10/19/2023 16:46:00'!
PASSED!

----QUIT----(19 October 2023 16:46:15) CuisUniversity-5981.image priorSource: 10416991!